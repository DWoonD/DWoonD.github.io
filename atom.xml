<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DWoonD</title>
  
  <subtitle>Desenvolvimento Web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dwoond.github.io/"/>
  <updated>2019-09-23T18:59:17.266Z</updated>
  <id>https://dwoond.github.io/</id>
  
  <author>
    <name>Willian D. Santos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dúvidas HTML - Mentoria</title>
    <link href="https://dwoond.github.io/duvidas-html-mentoria/"/>
    <id>https://dwoond.github.io/duvidas-html-mentoria/</id>
    <published>2017-11-14T19:33:33.000Z</published>
    <updated>2019-09-23T18:59:17.266Z</updated>
    
    <content type="html"><![CDATA[<p>Bom Pessoal, voltando depois de um tempo sem postar, hoje trago para vocês e principalmente para a minha mentorada um registro da última sessão de dúvidas que tivemos, assim consigo manter um registro para futuras consultas e uma referência para alguma pessoa que possa ter as mesmas dúvidas a respeito.</p><p>Para quem não sabe eu faço parte agora do projeto de <a href="https://github.com/training-center/mentoria" target="_blank" rel="noopener">Mentoria do CT</a>, é um projeto bem bacana que ajuda pessoas que querem estudar a se conectar com pessoas dispostas a mentorar e guiar. Estou mentorando na parte de Front End e no momento tenho uma mentorada. (Escreverei mais sobre o assunto em breve).</p><p>Bom, sem mais delongas, vamos as perguntas.</p><h4 id="1-Sobre-as-tags-main-article-qual-a-diferenca-entre-elas-Ja-vi-codigos-usando-main-outros-article-logo-abaixo-do-body-para-indicar-o-conteudo-da-pagina-e-me-confundi"><a href="#1-Sobre-as-tags-main-article-qual-a-diferenca-entre-elas-Ja-vi-codigos-usando-main-outros-article-logo-abaixo-do-body-para-indicar-o-conteudo-da-pagina-e-me-confundi" class="headerlink" title="1 - Sobre as tags main/article qual a diferença entre elas? Já vi códigos usando main outros article logo abaixo do body para indicar o conteúdo da página e me confundi."></a>1 - Sobre as tags <em>main/article</em> qual a diferença entre elas? Já vi códigos usando <em>main</em> outros <em>article</em> logo abaixo do body para indicar o conteúdo da página e me confundi.</h4><p>O uso da tag <em>main</em> serve para podermos declarar que um pedaço de código é o principal no assunto tratado naquela página. Já o <em>article</em> é uma tag para definir um artigo, como um artigo ciêntifico, pois nele tem header, footer entre outras tags, inclusive pode ter um <em>main</em> dentro.</p><h4 id="2-Tags-nav-e-menu-quando-usar-uma-e-quando-usar-a-outra-Ambas-servem-para-fazer-links-de-menu-A-tag-menu-ainda-nao-e-suportada-em-browsers-ne-Ou-uso-a-tag-menu-para-fazer-o-menu-e-a-nav-para-os-links"><a href="#2-Tags-nav-e-menu-quando-usar-uma-e-quando-usar-a-outra-Ambas-servem-para-fazer-links-de-menu-A-tag-menu-ainda-nao-e-suportada-em-browsers-ne-Ou-uso-a-tag-menu-para-fazer-o-menu-e-a-nav-para-os-links" class="headerlink" title="2 - Tags nav e menu, quando usar uma e quando usar a outra. Ambas servem para fazer links de menu? A tag menu ainda não é suportada em browsers, né? Ou uso a tag menu para fazer o menu e a nav para os links?"></a>2 - Tags <em>nav</em> e <em>menu</em>, quando usar uma e quando usar a outra. Ambas servem para fazer links de menu? A tag <em>menu</em> ainda não é suportada em browsers, né? Ou uso a tag <em>menu</em> para fazer o <em>menu</em> e a nav para os links?</h4><p>As tags de <em>menu</em> e <em>nav</em> servem para poder se referir ao menu, seja do site ou de uma aplicação web, a principio <em>menu</em> seria para aplicações web e <em>nav</em> seria para sites, porém hoje o mais correto é adotar a utilização do <em>nav</em> uma vez que tem um suporte mais amplo pelos navegadores.</p><h4 id="3-Seria-a-mesma-coisa-da-duvida-acima-porem-com-o-datalist-e-um-select-ambos-fazem-uma-dropdown-Qual-e-quando-devo-usar-uma-ou-outra"><a href="#3-Seria-a-mesma-coisa-da-duvida-acima-porem-com-o-datalist-e-um-select-ambos-fazem-uma-dropdown-Qual-e-quando-devo-usar-uma-ou-outra" class="headerlink" title="3 - Seria a mesma coisa da dúvida acima porém com o datalist e um select, ambos, fazem uma dropdown.Qual e quando devo usar uma ou outra?"></a>3 - Seria a mesma coisa da dúvida acima porém com o <em>datalist</em> e um <em>select</em>, ambos, fazem uma dropdown.Qual e quando devo usar uma ou outra?</h4><p>A diferença do datalist para o select, é que o datalist é um input como um input text porém ele aparece sugestões para ser clicado, já o select é apenas um select com opções pre definidas.</p><p>Fiz um exemplo no <a href="https://codepen.io/DWoonD/pen/pdbBMM" target="_blank" rel="noopener">codepen</a> caso tenham interesse em ver mais.</p><h4 id="4-Folha-de-estilo-alternativa-Declaro-com-link-rel-”alternative-stylesheet”-Beleza-mas-como-funciona-isso-O-usuario-tem-que-escolher-esse-“tema”-via-browser-Pode-ter-mais-de-1-folha-alternativa"><a href="#4-Folha-de-estilo-alternativa-Declaro-com-link-rel-”alternative-stylesheet”-Beleza-mas-como-funciona-isso-O-usuario-tem-que-escolher-esse-“tema”-via-browser-Pode-ter-mais-de-1-folha-alternativa" class="headerlink" title="4 - Folha de estilo alternativa. Declaro com link rel=”alternative stylesheet”. Beleza, mas como funciona isso? O usuário tem que escolher esse “tema” via browser? Pode ter mais de 1 folha alternativa?"></a>4 - Folha de estilo alternativa. Declaro com <em>link rel=”alternative stylesheet”</em>. Beleza, mas como funciona isso? O usuário tem que escolher esse “tema” via browser? Pode ter mais de 1 folha alternativa?</h4><p>Pode se ter mais de uma folha de estilos alternativos sim. E o problema nessa implementação é justamente o fato dessa dependência do browser para poder trocar a mesma, hoje em dia temos técnicas mais avançadas para poder fazer isso através de css e javascript.</p><h4 id="5-Nao-entendi-o-funcionamento-da-tag-base"><a href="#5-Nao-entendi-o-funcionamento-da-tag-base" class="headerlink" title="5 - Não entendi o funcionamento da tag base."></a>5 - Não entendi o funcionamento da tag <em>base</em>.</h4><p>Essa é a metatag utilizada no head para podermos dizer ao browser ou servidor qual o caminho de base que ele deve utilizar para buscar os links relativos da aplicação, ou seja, num elemento <em>a</em> ao invés de eu por <em>href=”<a href="https://meusite.com/teste.html&quot;" target="_blank" rel="noopener">https://meusite.com/teste.html&quot;</a></em> eu posso simplesmente colocar <em>href=”teste.html”</em> e na tag base definir “<a href="https://meusite.com/&quot;" target="_blank" rel="noopener">https://meusite.com/&quot;</a> que com isso o browser vai entender que quero chamar a página “<a href="https://meusite.com/teste.html&quot;" target="_blank" rel="noopener">https://meusite.com/teste.html&quot;</a>.</p><h4 id="6-Para-que-serve-o-http-equiv-“Content-type”-Tenho-que-declarar-sempre"><a href="#6-Para-que-serve-o-http-equiv-“Content-type”-Tenho-que-declarar-sempre" class="headerlink" title="6 - Para que serve o http-equiv = “Content-type”? Tenho que declarar sempre?"></a>6 - Para que serve o <em>http-equiv = “Content-type”</em>? Tenho que declarar sempre?</h4><p>O content type utilizamos para poder alterar o comportamento do servidor ou do navegador, normalmente utilizamos o básico que já vem nos editores de códigos, mas não é obrigatório de ser usado. Um caso de uso é utilizar ele para fazer refresh automatico na página.</p><h4 id="7-Para-a-tag-link-temos-o-rel-”prefetch”-que-serve-como-um-pre-carregamento-de-arquivos-grandes-Acho-que-deve-se-usar-com-cautela-porem-por-exemplo-tenho-uma-pagina-chamada-video-que-contem-varias-imagens-e-videos-Irei-declarar-essa-pagina-no-menu-como-prefetch-para-o-rel-Seria-assim-seu-funcionamento"><a href="#7-Para-a-tag-link-temos-o-rel-”prefetch”-que-serve-como-um-pre-carregamento-de-arquivos-grandes-Acho-que-deve-se-usar-com-cautela-porem-por-exemplo-tenho-uma-pagina-chamada-video-que-contem-varias-imagens-e-videos-Irei-declarar-essa-pagina-no-menu-como-prefetch-para-o-rel-Seria-assim-seu-funcionamento" class="headerlink" title="7 - Para a tag link temos o rel=”prefetch” que serve como um pré-carregamento de arquivos grandes. Acho que deve-se usar com cautela porém, por exemplo, tenho uma página chamada video que contém várias imagens e videos. Irei declarar essa página no menu como prefetch para o rel? Seria assim seu funcionamento?"></a>7 - Para a tag <em>link</em> temos o <em>rel=”prefetch”</em> que serve como um pré-carregamento de arquivos grandes. Acho que deve-se usar com cautela porém, por exemplo, tenho uma página chamada video que contém várias imagens e videos. Irei declarar essa página no menu como <em>prefetch</em> para o <em>rel</em>? Seria assim seu funcionamento?</h4><p>Isso era algo utilizado antigamente quando a internet ainda não era tão rápida e se fazia necessário ter um pré carregamento de algumas coisas, hoje em dia temos tecnologia melhor para solucionar esse tipo de problema como veremos em breve. Mas sim era uma boa, um problema é que temos que garantir o caminho do usuario da página com prefetch para a página desejada, pois caso ele não acesse a página que iria utilizar o prefetch, meio que fizemos isso a toa. E não é uma boa ideia utilizar isso em todas as páginas.</p><h4 id="8-Quando-usamos-links-hierarquicos-e-sequenciais-como-rel-”next”-seria-mais-semantico-do-que-pratico-ja-que-o-que-vai-faze-lo-direcionar-para-outra-pagina-seria-o-href-certo"><a href="#8-Quando-usamos-links-hierarquicos-e-sequenciais-como-rel-”next”-seria-mais-semantico-do-que-pratico-ja-que-o-que-vai-faze-lo-direcionar-para-outra-pagina-seria-o-href-certo" class="headerlink" title="8 - Quando usamos links hierárquicos e sequenciais como rel=”next” seria mais semantico do que prático já que o que vai faze-lo direcionar para outra página seria o href, certo?"></a>8 - Quando usamos <em>links</em> hierárquicos e sequenciais como <em>rel=”next”</em> seria mais semantico do que prático já que o que vai faze-lo direcionar para outra página seria o <em>href</em>, certo?</h4><p>Isso hoje em dia também é muito pouco usado, funcionava mais quando as páginas la nos primórdios eram mais utilizadas para representar artigos cientificos e não tinha toda essa interatividade de hoje em dia.</p><h4 id="9-De-acordo-com-o-livro-podemos-usar-o-iframe-para-inserirmos-miniaturas-de-imagens-permitindo-o-usuario-clicar-e-ver-a-imagem-em-tamanho-maior-Pensando-sobre-isso-teria-outras-formas-de-fazer-a-mesma-coisa-sem-o-uso-do-iframe-Acho-que-poderiamos-utilizar-outas-formas-ou-o-iframe-e-mais-indicado"><a href="#9-De-acordo-com-o-livro-podemos-usar-o-iframe-para-inserirmos-miniaturas-de-imagens-permitindo-o-usuario-clicar-e-ver-a-imagem-em-tamanho-maior-Pensando-sobre-isso-teria-outras-formas-de-fazer-a-mesma-coisa-sem-o-uso-do-iframe-Acho-que-poderiamos-utilizar-outas-formas-ou-o-iframe-e-mais-indicado" class="headerlink" title="9 - De acordo com o livro podemos usar o iframe para inserirmos miniaturas de imagens permitindo o usuário clicar e ver a imagem em tamanho maior. Pensando sobre isso, teria outras formas de fazer a mesma coisa sem o uso do iframe. Acho que poderíamos utilizar outas formas ou o iframe é mais indicado?"></a>9 - De acordo com o livro podemos usar o <em>iframe</em> para inserirmos miniaturas de imagens permitindo o usuário clicar e ver a imagem em tamanho maior. Pensando sobre isso, teria outras formas de fazer a mesma coisa sem o uso do <em>iframe</em>. Acho que poderíamos utilizar outas formas ou o <em>iframe</em> é mais indicado?</h4><p>Hoje em dia temos tecnicas melhores para se usar que um iframe, como fancybox com jquey ou javascript mesmo, é até algumas tecnicas com puro css que podemos utilizar algumas propriedades novas do CSS3 como grid para poder criar bibliotecas maravilhosas. Vai muito da depênencia do projeto, mas os iframe cada dia é menos utilizado.</p><p>PS: Livro utilizado para as referências aqui das perguntas e de estudos é o Smashing Magazine HTML5.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bom Pessoal, voltando depois de um tempo sem postar, hoje trago para vocês e principalmente para a minha mentorada um registro da última 
      
    
    </summary>
    
      <category term="Mentoria" scheme="https://dwoond.github.io/categories/Mentoria/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="duvidas" scheme="https://dwoond.github.io/tags/duvidas/"/>
    
  </entry>
  
  <entry>
    <title>A Importancia da Comunidade</title>
    <link href="https://dwoond.github.io/A-Importancia-da-Comunidade/"/>
    <id>https://dwoond.github.io/A-Importancia-da-Comunidade/</id>
    <published>2016-11-09T20:41:19.000Z</published>
    <updated>2019-09-23T18:59:17.251Z</updated>
    
    <content type="html"><![CDATA[<p>Faaala Galera belezera? Faz um certo tempinho que não posto nada e sei o quanto isso é chato e talz, mas agora acredito que vou conseguir manter uma certa regularidade. Bom volto a falar de comunidade e espero que gostem e possam começar a fomentar esse segmento também. Para quem ainda não leu aqui está o post que falei sobre <a href="https://dwoond.github.io/comunidade-palestras/">comunidade e palestras</a> e como isso afetou minha vida e tudo mais. Esse primeiro post faz um pouco mais de um ano que escrevi e hoje venho mais uma vez reafirmar dessa importância. Sem mais delongas bora lá.</p><p>#É importante mesmo?<br>Acho que muitos se perguntam se realmente é importante fazer parte da comunidade ou até mesmo acredito que muitos possam não conhecer comunidades, mas assim, para mim, acho muito importante. Vou resumir um pouco o que aconteceu comigo nos últimos meses e até um dos motivos que não andei postando nada.</p><p><strong>Para quem me conhece a mais tempo sabe que eu vivia no interior de São Paulo numa cidade chamada Araras, e desde que decidi virar desenvolvedor web, passei a estudar e buscar conhecimento, sempre de forma online através de forums, cursos e claro blogs. Através disso acabei conhecendo várias comunidades das mais variadas tecnologias, tem o pessoal de Front, o pessoal do Android, a turma do laravel e assim vai. Conforme contei no outro post meu primeiro evento foi um choque de realidade, me transformou e abriu meus olhos pra muitas coisas que são simplesmente incríeis e com isso me fortaleceu ainda mais o desejo de estar sempre participando mesmo que como um aprendiz inicialmente. Pois bem nesse ano de 2016 quem acompanha esse mundo sabe que aconteceu a Front Week, foi uma semana incrível que tratou de Front End aqui em Sampa, teve eventos de JS, FrontinSampa, Code in the Dark, meetup (outra coisa que vou falar depois) no nubank com a galera de front ux e outros, eu ainda de carona na semana peguei a primeira conferencia de nodejs. E isso tudo foi maravilhoso pois é um momento de conhecer coisas novas, renovação total como pessoa e profissional e claro como sempre digo o networking é fantastico e com isso poder firmar ainda mais a importancia de estar conectado com pessoas. Depos disso graças a uma pessoa na comunidade ABCDevelpers eu consegui arrumar um belo emprego na Accenture e hoje estou morando em Sampa, bem empregado com novos desafios e tudo isso graças a comunidade.</strong></p><blockquote><p>A comunidade tranformou minha vida de uma forma inimaginavel, acho que essa é a maior característica e objetivo delas, causar transformação.</p></blockquote><p>Isso tudo veio impactar muito em minha vida pessoal, muito pelo fato de que eu sempre quis voltar para sampa, morar na selva de pedra onde eu poderia realmente crescer e poder me aprimorar e criar coisas fantásticas. Sabe como consegui tudo isso? Pois é, através da comunidade, acredito que isso tenha sido um diferencial muito bacana na vida e um facilitador enorme, principalmente por causa de oportunidades que vc encontra. O último evento que fui o <a href="http://2016.abcdevelopers.org/" target="_blank" rel="noopener">ABCDevelopers</a> 90% dos palestrantes estavam com vagas aberta em suas empresas isso sem falar na HPE que cedeu espaço para o evento que também estava contratando, para quem tem interesse no mundo corporativo isso é um baita de um adianto.</p><p>Outra grande diferença é realmente essa de comunidade ter mais esse lance de ser mais cool, mais descolada, os palestrantes normalmente estarem em startups e com isso sempre levando essa cultura e talvez indo na contra mão das grandes corporações, não sei até que ponto isso pode ser verdade ou não, mas sei que hoje eu estou numa grande corporação e ela tem se atentado para isso e adivinhem com qual interesse? Exatamente, de encontrar talentos e agredar mais e mais para empresa. Então a comunidade tem uma grande importancia para poder transferir conhecimento, fazer novas amizades e de cara ainda conseguir uma vaga desejada.</p><p>E foi assim exatamente que aconteceu comigo, através de uma pessoa na comunidade que me indicou uma vaga, e depois disso email vai e email vem e hoje eu consegui estar dentro de uma empresa fantastica e o mais engraçado, que eu era do interior, estava numa comunidade do ABC para conseguir um emprego em uma corporação, então quebre seus paradigmas, deixe seus preconceitos de lado, venha conhecer pessoas, aprender coisas novas, venha dar um upgrade na sua vida pessoal como um todo e também na sua carreira, não ache que isso é só perca de tempo.</p><p>Um objetivo que estou trazendo para mim nesse fim de ano é de alguma forma conseguir fazer a minha empresa comece a comparecer a eventos, patrocinar de alguma forma e também mostrar ao mercado coisas novas. O mundo vem mudando e isso é percebido em todos os lugares. Aqui onde estou hoje Accenture Interactive acredito que conseguimos mesclar o melhor dos dois mundos, e por ser uma empresa que acredita que seu maior capital são as pessoas que estão dentro, então eu tenho certeza que vou conseguir extender isso para fora e ajudar em comunidades de uma forma ou de outra.</p><p>Antes que você me entenda mal, eu não estou aqui dizendo que corporações são caretas e antiquadas e que toda comunidade é cool e etc, estou aqui apenas para te dizer que se puder participe, compareça, faça presença em comunidades, busque e procure comunidades que vc se sinta a vontade e pela experiência que eu tenho isso não vai ser difícil, todo evento que fui desde um evento mais organizado até um simples meetup sempre fui muito bem recebido, muito bem tratado então não tenha medo. E indo mais além não tenha medo de contribuir, de criar de repente uma palestra e ir palestrar num evento, de passar conhecimento adiante, de fomentar discussões e até mesmo escrever um blog, o desafio é grande mas o resultado é prazeroso.</p><p>Outra coisa são os meetups, meu se você ainda não participa de meetup para tudo que está fazendo agora e comece a baixar o app no celular, se cadastra e começa a procurar, tem grupos para tudo, desde estudar inglês, fazer artesanato, até nossa área de programação em todas as tecnologias possíveis. Então bora participar e aprender cada vez mais.</p><p>Bom não sei se consegui passar tudo o que eu desejava, afinal faz um tempo que estou sem escrever e tem muita coisas acontecendo, tem muito a escrever e acredito que vamos ter muitos bons conteúdos e projetos novos surgindo em breve, então pessoal qualquer dúvida que vc tenha pode deixar aqui nos comentários que terei o maior prazer em responder.</p><p>Agradeço a leitura<br>Até breve</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Faaala Galera belezera? Faz um certo tempinho que não posto nada e sei o quanto isso é chato e talz, mas agora acredito que vou conseguir
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="comunidade" scheme="https://dwoond.github.io/tags/comunidade/"/>
    
      <category term="carreira" scheme="https://dwoond.github.io/tags/carreira/"/>
    
      <category term="oportunidades" scheme="https://dwoond.github.io/tags/oportunidades/"/>
    
  </entry>
  
  <entry>
    <title>CodeStyle-CSS Padrões</title>
    <link href="https://dwoond.github.io/CodeStyle-CSS-Padroes/"/>
    <id>https://dwoond.github.io/CodeStyle-CSS-Padroes/</id>
    <published>2016-05-04T23:21:41.000Z</published>
    <updated>2019-09-23T18:59:17.257Z</updated>
    
    <content type="html"><![CDATA[<p>Faaaaaala galera (copiando um pouco o Daniel Filho),<br>Estou trazendo para vocês depois de um tempo a continuação da série sobre code style e hoje vamos falar um pouco a respeito de padrões CSS já estabelecidos ai no mercado e adotado por várias equipes e empresas pelo mundo a fora. Sei que faz um tempo que o blog está parado, mas agora que estou conseguindo colocar um pouco de ordem na correria do dia a dia e conseguindo postar mais, mas isso são assuntos para outros posts.<br>Bom vamos lá então…</p><p>Para começar os padrões que vamos abordar aqui hoje serão:</p><ul><li>CSS Orientado a Objetos</li><li>SMACSS</li><li>BEM</li><li>ITCSS</li></ul><p>e também vou dar umas dicas gerais, que podemos acrescentar junto a esses padrões para termos um pouco mais de performance.</p><p>Bom vamos pelo primeiro então.</p><p>##CSS Orientado a Objetos</p><p>Orientação a objeto é um termo clássico quando se trata de desenvolvimento de software e principalmente conhecido quando se está no desenvolvimento back-end, ou de linguagens mais robustas e claro cada uma com suas particularidades.<br>A essência da orientação a objeto é evitar a repetição de código. O OOCSS ou CSS Orientado a Objetos começou em 2009 com <strong>Dona Sullivan</strong> ex Yahoo depois de analizar muito de seus códigos antigos reparou que há muita repetição e com isso propôs o OOCSS:</p><blockquote><p>Para deixar bem claro, não se trata de mudar a sintaxe do CSS ou instalar algum pacote mágico que o fará melhor. CSS orientado a objetos é uma metáfora para indicar que é possível escrever um CSS mais eficiente, sem repetições, que seja mais profissional e é considerado por alguns até como framework.</p></blockquote><p>Alguns dos prolemas que o OOCSS visa resolver</p><ul><li>A dificuldade de tocar projetos de médio/grande porte.</li><li>O tamanho dos arquivos CSS é cada vez maior conforme o projeto evolui.</li><li>Reúso de código quase inexistente (pessoas não confiam em código alheio).</li><li>Código frágil (até o melhor código pode se perder quando um não expert mexe nele).</li></ul><p>Segundo a Dona Sullivan (<a href="http://pt.slideshare.net/stubbornella/object-oriented-css" target="_blank" rel="noopener">slides</a>), as soluções que emergem do uso de OOCSS são inúmeras (e tentadoras), tornando seu CSS:</p><ul><li>Modular: combinável, reusável e extensível.</li><li>Leve: relacionamento 1:N entre CSS e potenciais layouts.</li><li>Rápido: poucas requisições HTTP e tamanhos mínimos de arquivos.</li><li>Pronto para o futuro: manutenível, semântico e padronizado.</li><li>Simplificado e acessível: um bombonzinho!</li></ul><p><strong>Princípios de OOCSS</strong></p><p>Dentro da proposta do OOCSS exitem dois princípios mais importante</p><ol><li>Separar estrutura e skins</li><li>Separar container e conteúdo</li></ol><p><strong>Separar estruturas e skins</strong> significa repetir características visuas <code>skins</code> separadas, que podem ser combinadas em vários “objetos” para conseguir-se muitas variações sem muito código. Ex. <code>Backgrounds e bordas</code>.<br>Outro bom conselho é sempre usar classes para nomear ojetos ao invés do HTML, pois assim você mantém seu código receptivo a novas atualizações de sintaxe do html sem mecher no CSS futuramente.</p><p><strong>Separar o conteinar e conteúdo</strong> essencialmente quer dizer: raramente use estilos que dependam da localização. Idealmente, um objeto deve parecer igual onde quer que ele esteja dentro da página ou em qualquer outro lugar que ele for chamado.</p><p>Melhor<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTML</span><br><span class="line">&lt;<span class="selector-tag">h2</span> class=<span class="string">"category-title"</span>&gt;</span><br><span class="line"></span><br><span class="line">CSS</span><br><span class="line"><span class="selector-class">.category</span> title &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>do que<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CSS</span><br><span class="line"><span class="selector-class">.category-title</span> <span class="selector-tag">h2</span> &#123;&#125;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"category-title"</span>&gt;</span><br><span class="line">&lt;h2&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>O que é um “Objeto” no CSS?</strong><br>Um objeto CSS é formado por 4 elementos:</p><ol><li>HTML - Que pode ser 1 ou mais nós no DOM</li><li>Declarações CSS, que estilizam estes nós, começando com o nome da classe referente ao wrapper</li><li>Componentes como imagens de backgrounds ou sprites, por exemplo</li><li>Comportamentos Javascripts, listeners ou métodos associados</li></ol><p>Pode ficar confuso se você tentar sempre fazer analogia a objetos de outras linguagens como PHP etc, então vou tentar por um exemplo para facilitar:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"mod"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"inner"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"hd"</span>&gt;Bloco Head&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"bd"</span>&gt;Bloco Body&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"ft"</span>&gt;Bloco Foot&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p><p>O objeto é um módulo, indicado pela classe mod. Ele contém 4 nós-propriedades (que não podem existir sem o módulo), incluindo 2 regiões obrigatórias ( inner e bd) e 2 regiões opcionais ( hd e ft).</p><p><strong>OOCSS e performance</strong></p><p>Usar OOCSS também traz o benefício da performance, que é duplo:</p><ul><li>Intenso reúso de código: o que significa menos código CSS, arquivos menores e transferências mais rápidas;</li><li>Menos repaints e reflows: se não sabe o que isso significa, leia o artigo: <a href="http://goo.gl/9rCo4B" target="_blank" rel="noopener">O que todo desenvolvedor front-end deve saber sobre renderização de páginas web</a></li></ul><p>##SMACSS<br>Foi criada por Jonathan Snook, significa Scalable and Modular Architeture for CSS ou Arquitetura Escalável e Modular para CSS, e é mais uma normatização para podermos estruturar o código CSS. O SMACSS propõe que dividemos o nosso css em partes. Essas partes são:</p><ul><li>Base</li><li>Layout</li><li>Module</li><li>States</li><li>Theme</li></ul><p>Cada abordagem tem suas particularidades que iremos discutir abaixo. Caso queira saber mais sobre SMACSS basta acessar o <a href="http://smacss.com" target="_blank" rel="noopener">site oficial</a> deles e eles vendem um livro também..<br>Dependendo do tamanho do projeto vc pode adotar essa estrutura de duas formas, a primeira é fazendo dentro da sua pasta CSS um arquivo para cada camada, eu pessoalmente prefiro criar dentro da pasta de CSS uma pasta para cada camada e então para cada necessidade eu acabo criando um arquivo.</p><p>###Base</p><p>As regras de base serão utilizadas para poder estilizar basicamente todos as tags HTML diretamente. Aqui dificilmente iremos ver um !important ou algo similar pois são os estilos mais básicos para cada elemento. Normalmente colocamos o reset nessa camada. Como falei acima, poderia ter uma base.css e um arquivo reset.css. Se vc utilizar pre processador CSS, ai vc pode colocar os arquivos de configurações aqui e também o de mixins.</p><p>###Layout</p><p>Na camada de layout vamos estilizar as partes do layout que normalmente não se repetem, por exemplo, header, main, sidebar e footer. Pense no layout como a camada que definira o wireframe do site, app, etc. Nessa camada também podemos separar cada arquivo para poder ter um maior controle quando o site ou a aplicação começar a escalar, por exemplo, header.css, main.css, sidebar.css e footer.css. Há uma convenção de nomenclatura no SMACSS que os layouts sejam escritos com l- para que quem veja o código possa identificar que faz parte de um layout, no nosso caso como estamos separando por arquivo, não sei se faz sentido, mas fica a critério de cada um.</p><p>###Module<br>Os módulos como o próprio nome diz são as partes que vamos criar para que sejam ou não reaproveitadas em outros lugares no projeto, então por isso eles nunca devem se prender a localização por exemplo, ou nenhuma outra forma que pode variar o módulo. Por exemplo, um módulo de busca, deve parecer e ser exatamente igual seja no header, no sidebar ou no footer.</p><p>###States<br>States ou estados no nosso querido português, são estilos de css que definem um estado de um módulo (normalmente um módulo), por exemplo, se o módulo está ativo poderiamos ter um state .is-active e os atributos que definem a diferença do módulo normal para o módulo ativo. Há uma convenção de nomenclatura no SMACSS que os módulos sejam escritos com a preprosição is- para que qualquer um que olhe o css saiba que se trata de um state. E aqui como em todas as camadas também podem haver as separações por arquivos.</p><p>###Theme<br>Na camada theme, é onde podemos personalizar o nosso site e estilizar eles de acordo com o tema que quisermos, o exemplo mais fácil de visualizar nisso é criar temas para datas comemorativas, natal, pascoa etc. Cada tema pode ter seu arquivo christmas.css, easter.css.</p><p>##BEM<br>O nome BEM é um acrônimo para Block, Element, Modifier ou Bloco, Elemento, Modificador. Surgiu da nescessidade da Yandex uma empresa russa que tem vários serviços web, e um dos maiores buscadores de marketing share da Russia. Quando tiveram a necessidade de crescer os projetos e manter um front end mais consistente surgiu o BEM, que na verdade é uma metodologia completa, mas aqui no ocidente estamos por hora usando apenas a convenção de nomenclatura. Caso queira saber mais sobre o conceito todo só acessar o <a href="http://bem.info" target="_blank" rel="noopener">site</a>.</p><p>Em termos simples quando utilizamos o BEM temos</p><ul><li><em>Bloco</em><ul><li>Entidade independente com seu próprio significado, é a abstração mais geral de um componente módulo.</li></ul></li><li><em>Elemento</em><ul><li>Descendente e parte de um bloco, ajuda a forma-lo, como um todo.</li></ul></li><li><p><em>Modificador</em></p><ul><li>Um estado ou versão diferente do Bloco ou Elemento</li></ul><p>Acredito que com a descrição acima já da para pegar a base da ideia de como funciona o BEM para facilitar vamos pegar como exemplo um grupo de tabs.<br>O grupo todo seria o <strong>Bloco</strong>, cada tab seria um <strong>Elemento</strong> e o <strong>Modificador</strong> seria quando ela está selecionada. </p></li></ul><p><img src="menu-items.png" alt="Imagem mostrando o Bloco e Elementos de um grupo de abas"></p><p> Para mais detalhes recomendo o <a href="https://www.smashingmagazine.com/2012/04/a-new-front-end-methodology-bem/" target="_blank" rel="noopener">artigo por uma das desenvolvedoras da própria Yandex, <strong>Varvara Stepanova</strong></a></p><p>Agora como podemos utilizar isso no nosso dia a dia e na nossa folhas de estilos, simples, escrever BEM, é relativamente tranquilo, basta seguir os guias definidos. Por exemplo</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.block__element</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.block--modifier</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>Isso é uma convenção para facilitar que todos que utilizem BEM consigam identificar e saber o que cada componente faz diretamente. Um exemplo mais abstrato:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.person</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.person__hand</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.person--female</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.person--female__hand</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.person__hand--left</span> &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>O bloco <code>person</code> tem vários Elementos, como <code>hand</code> e pode ter modificadores como <code>female</code>. Por sua vez, os <code>elementos</code> também podem ter <code>modificadores</code> como no caso do <code>left</code>.</p><p>Bom algumas pessoas podem achar feio escrever dessa forma pelo impacto de tantos underlines e hífens, porém isso facilita muito na hora de codar e manter o código crescente e de fácil manutenção.<br>Algumas vantagens do BEM</p><ul><li>Código desacoplado;</li><li>Reúso automático de código;</li><li>Menos repetições;</li><li>Rápida identificação de estruturas HTML através do CSS e vice-versa;</li><li>Independência absoluta de classes;</li><li>Seletores menores e mais performáticos;</li><li>CSS mais manutenível.</li></ul><p>##ITCSS<br>Também chamado de Inverted Triangle CSS. Foi criado por Harry Roberts, que quando abordado sobre a necessidade de uma arquitetura css deu a seguinte respota</p><blockquote><p>CSS é incrivelmente fácil de escrever, mas possui uma ordem de magnitude mais difícil para se gerir, manter e escalar. Como os projetos ficam mais maduros e maiores, CSS pode realmente começar a “comer pelas beiradas”, causando quantidades incalculáveis de confusão, dores de cabeça e frustrações para os desenvolvedores responsáveis por geri-los. Isso se dá, principalmente, devido a uma série de princípios fundamentais de CSS que tornam inerentemente mais difícil a gestão de qualquer projeto de UI não trivial.</p></blockquote><p>Pensando nesse tipo de limitação foi criado o ITCSS, trata-se de uma metodologia bastante simples de trabalhar que propõe uma arquitetura de CSS diferente mas eficiente.</p><p> Alguns dos principais benefícios de usar ITCSS são:</p><ul><li>Por ser simplíssima, é uma metodologia acessível a qualquer um;</li><li>Organiza e gerencia o código em cascata;</li><li>Cria uma organização, na qual se sabe onde cada parte do código deve estar;</li><li>Reduz perdas e redundância de código;</li><li>Evita dores de cabeça com especificidade CSS </li></ul><p>Parece muito bom para ser verdade, mas acredite: simplesmente é!</p><p><strong>As camadas do ITCSS</strong>    </p><p>As 7 camadas do triângulo invertido são:</p><ul><li>Configurações (Settings): variáveis e configurações globais;</li><li>Ferramentas (Tools): funções e mixins;</li><li>Genérico (Generic): estilos genéricos (resets, normalizes etc.);</li><li>Elementos (Elements): estilização de elementos HTML diretamente;</li><li>Objetos (Objects): padrões não cosméticos (mais sobre OOCSS em 3);</li><li>Componentes (Components): peças de UI isoladas (menu dropdown,<br>carousel etc.);</li><li>Trumps: utilitários, helpers, sobrescritas e hacks.</li></ul><p><img src="itcss.jpg" alt="Imagem do Triângulo invertido do ITCSS"></p><p>Além dessa organização mais formal, ITCSS é norteado  por princípios gerais.</p><ul><li>Sem uso de IDs, somente classes</li><li>Criação modular de componentes, em vez de páginas</li><li>Uso e abuso de classes no HTML (nada de economia de caracteres aqui)</li></ul><p>Para complementar sua robustez, ITCSS é construída em cima de 3 métricas-chave:</p><ul><li>Geral para explícito: começa-se pelos estilos mais gerais e genéricos possíveis e, a partir daí, vão-se colocando camadas de estilo adicionais;</li><li>Baixa Especificidade para alta Especificidade: regras com especificidade menor aparecem em camadas mais genéricas; regras de maior, em camadas mais específicas/ focadas;</li><li>Muito alcance para pouco alcance: as regras presentes em camadas mais genéricas afetam grande parte do DOM e, à medida que vão se afunilando, alcançam cada vez menos porções.</li></ul><p><img src="itcss2.jpg" alt="Imagem do Triângulo invertido do ITCSS"></p><p>Consruir o código seguindo essas métricas garante que o código seja escrito em ordem lógica e progressiva.</p><p><strong>Configurações (settings)</strong><br>Quando pensar na camada Configurações, pense no termo estilos globais, já que é exatamente onde esse tipo de estilo deve estar.</p><p><strong>Ferramentas (tools)</strong><br>A camada Ferramentas deve conter funções e mixins (olha os préprocessadores CSS aí) relativos ao projeto. Essa camada vem logo após a de Configurações, porque pode ser necessário que alguma função ou mixin faça uso de uma configuração global qualquer.</p><p><strong>Genérico (generic)</strong><br>Na camada Genérico é que o CSS que efetivamente vai entrar em ação o resultado da compilação do pré-processador, diga-se dessa forma começa a ser escrito. Aqui é onde se definirão eventuais CSS resets; onde se coloca um Normalize.css <a href="http://goo.gl/YFPLMO" target="_blank" rel="noopener">http://goo.gl/YFPLMO</a> ; e onde um box-sizing geral é definido.<br>Essa camada afeta a imensa maioria do DOM, por isso, deve ser mais ampla e genérica, estando mais para a base do triângulo invertido.</p><p><strong>Elementos (elements)</strong><br>Na camada Elementos, consta a estilização de elementos HTML, propriamente ditos. Seguindo nametodologia do ITCSS, é uma camada ligeiramente mais específica que comporta estilizações de elementos HTML diretamente, conforme as necessidades do projeto. Devido ao tipo de estilização que há nela, geralmente depois de definidos os estilos, não é necessário que se mexa mais com eles, ficando essa tarefa para as camadas mais específicas do triângulo.</p><p><strong>Objetos (objects)</strong><br>A camada Objetos comporta estilos não cosméticos/abstratos, remetendo mais a OOCSS, grids, contêineres e outros desta natureza.</p><p><strong>Componentes (components)</strong><br>A camada Componentes é a que comporta o maior número de estilizações, já que nela devem constar os códigos dos elementos de UI do projeto (menus, carousels, slider etc.). Para facilitar o entendimento, faça um paralelo com os Módulos de SMACSS. Seguindo a proposta do ITCSS, essa é uma camada mais específica, que faz uso de tudo o que foi definido nas anteriores, tendo um nível de especificidade maior.</p><p><strong>Trumps</strong><br>Para ter-se um código totalmente elegante e formal, a camada Componentes poderia ter sido considerada a última. Porém, como “na prática, a teoria é outra”, ITCSS usa a camada Trumps como uma maneira de vencer (beats) os estilos das anteriores (se necessário), tornando-se o último bastião de estilização dentro da metodologia.<br>Esta camada contém utilitários, helpers, sobrescritas e hacks e, devido ao propósito pelo qual existe, não se acanhe em usar !important se necessário.<br>Trumps é a ponta do triângulo e, em decorrência disso, a camada com as regras mais específicas, explícitas e focadas.</p><p><strong>Organização do código com ITCSS</strong><br>Como foi possível perceber, a estrutura triangular invertida de ITCSS permite a organização do código, não mais por função estilos para tipografia, para formulários etc. Agora, organiza-se por explicitude e especificidade.<br>Em função da organização de ITCSS, a hierarquia, a cascata e a especificidade CSS trabalhama favor do desenvolvedor, já que cada camada somente dá prosseguimento ao que a anterior já definiu!</p><p>Dentro da estrutura de camadas de ITCSS, você pode usar a ordem de importação que quiser, desde que sejam obedecidos os seguintes critérios de similaridade:<br>• Especificidade: todos os seletores de elementos ou de classes ou todos utilitários com !important etc.;<br>• Explicitude: estilizar todos os elementos base HTML ou de UI etc.;<br>• Alcance: capacidade de afetar todo o DOM(por exemplo, * {}); partes do DOM(exemplo, a {}); uma seção do DOM( .carousel {}); ou um nó específico do DOM ( .clearfix {}).</p><p><strong>Visão Geral</strong><br>Como visto, ITCSS é uma nova maneira de pensar e organizar a arquitetura CSS de seus projetos. Sua estrutura permite parar de ordená-los por temas e passar a usar métricas úteis de CSS. Para isso, ele é organizado funcionalmente em camadas que aproveitam a hierarquia, cascata e especificidade CSS. Como qualquer metodologia, não se trata de regras rígidas nem conceitos escritos em pedra. Caso tenha gostado, mas gostaria de alterar uma ou outra coisa, sinta-se à vontade! A metodologia foi criada para ajudar, não para atrapalhar. Portanto, teste, experimente, use, reúse e adapte-a conforme seja necessário, sempre aproveitando o que de melhor ITCSS tem a oferecer!</p><p>##Dicas Gerais</p><ul><li><em>Usar nomenclaturas em Inglês</em></li><li>Não deixar de usar um <a href="http://dwoond.github.io/CodeStyle-CSS/">padrão de escrita para o seu CSS</a>.</li></ul><p>##Conclusão<br>Vimos aqui várias formas de poder estruturar e organizar o nosso CSS, quero deixar claro que isso pode variar de projeto a projeto, de equipe a equipe e nada aqui é uma regra absoluta, você pode escolher utilizar um pouco de cada e o que se adequar melhor, isso só precisa ficar bem alinhado com a equipe de trabalho para evitar futuros problemas.<br>Caso tenham alguma dúvida podem deixar abaixo e até a próxima.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Faaaaaala galera (copiando um pouco o Daniel Filho),&lt;br&gt;Estou trazendo para vocês depois de um tempo a continuação da série sobre code st
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="code style" scheme="https://dwoond.github.io/tags/code-style/"/>
    
      <category term="code" scheme="https://dwoond.github.io/tags/code/"/>
    
      <category term="style" scheme="https://dwoond.github.io/tags/style/"/>
    
      <category term="pattern" scheme="https://dwoond.github.io/tags/pattern/"/>
    
      <category term="css" scheme="https://dwoond.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CodeStyle - CSS</title>
    <link href="https://dwoond.github.io/CodeStyle-CSS/"/>
    <id>https://dwoond.github.io/CodeStyle-CSS/</id>
    <published>2016-01-09T20:49:35.000Z</published>
    <updated>2019-09-23T18:59:17.260Z</updated>
    
    <content type="html"><![CDATA[<p>Fala pessoal,<br>Depois de um tempo sem postar aqui, (infelizmente tive uns problemas pessoais, profissionais que precisei focar em algumas coisas para poder ajeitar a vida) volto com a continuação da nossa série sobre Code Style. Hoje vamos abordar a parte de CSS, e aqui tem bastante coisas legais para aprendermos, por isso eu vou separar em 2 post. Nesse primeiro momento irei escrever mais sobre a forma de escrever o CSS e algumas regrinhas que podemos adquirir no nosso dia a dia e no segundo post eu vou falar um pouco a respeito dos padrões que existem hoje para CSS como por exemplo SMACSS, BEM etc…</p><p>Se é a primeira vez que você está aqui e quer acompanhar a série desde o início recomendo começar por <a href="http://dwoond.github.io/Code-Style/">aqui - Code Style -</a>, depois leia o segundo artigo <a href="http://dwoond.github.io/Code-Style-HTML/">aqui - Code Style HTML</a>. Se quiser saber de todos os post que já puliquei pode conferir na <a href="http://dwoond.github.io">Home</a></p><p>Bom vamos começar então com o artigo e vamos falar primeiramente da sintaxe do CSS</p><p><strong>Sintaxe</strong></p><ul><li>Use tabulação (tab) com dois espaços de distância.</li><li>Quando agrupar seletores, mantenha cada seletor único em uma linha.</li><li>Sempre acrescente um espaço antes de abrir chaves e começar a declaração do bloco de código para ter mais legibilidade.</li><li>Sempre feche a chaves em uma nova linha;</li><li>Acrescente um espaço depois dos dois pontos (:) de cada declaração para ter mais legibilidade.</li><li>Cadad declaração deve estar em uma linha para que seja mais fácil de ler e encontrar erros.</li><li>Termine todas as declarações com ponto e vírgula (;), a última declaração é opcional, então fica a critério da equipe decidir e optar por colocar ou não e sempre manter o padrão decidido.</li><li>Não coloque espaço depois das vírgulas para definir valores nas declarações de <code>rgb(), rgba(), hsl(), hsla(), ou rect()</code>. Isto ajuda a diferenciar valores de cores múltiplos de valores de propriedades múltiplos.</li><li>Use sempre um espaço para separar os os valores de propriedades depois de uma vírgula.</li><li>Não coloque o 0 como prefixo de valores de cores (ex. <code>.5</code> melhor que <code>0.5</code> e <code>-.5</code> é melhor que <code>-0.5</code>)</li><li>Caixa baixa para todos códigos hexadecimais. Ex.: <code>#fff</code>. Letras em caixa baixo são muito mais faceis de dicernir quando estamos olhando um documento com mais de uma forma.</li><li>Use a forma hexadecimal abreviada quando disponível. Ex.: <code>#fff</code> melhor que <code>#ffffff</code>.</li><li>Colocar aspas em um atributo em seletores, ex. <code>input[type=&quot;text&quot;]</code>. Em alguns casos são opcionais, mas é fortemente recomendado para ter consistência.</li><li>Evite especificar unidades para o zero, Ex.: <code>margin: 0;</code> melhor que <code>margin: 0px;</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CSS Ruim */</span></span><br><span class="line"><span class="selector-class">.selector</span>, <span class="selector-class">.selector-secondary</span>, <span class="selector-class">.selector</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#CCC</span>,inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#FFFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS Certo */</span></span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.selector-secondary</span>,</span><br><span class="line"><span class="selector-class">.selector</span><span class="selector-attr">[type="text"]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="number">#ccc</span>, inset <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Ordem de declaração</strong></p><p>Declarações de propriedade relacionadas devem ser agrupadas na seguinte ordem:</p><ol><li>Posicionamento</li><li>Box Model</li><li>Tipografia</li><li>Visual</li></ol><p>Posicionamento vem primeiro porque pode remover um elemento do fluxo do documento e sobreescrever box model relacionado ao estilo. O box model vem depois pois determina dimensões e colocação de um componente.</p><p>Todo o resto tem lugar no interior do componente ou não impacta as duas seções anteriores e por isso vem por último.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.declaration-order</span> &#123;</span><br><span class="line">  <span class="comment">/* Positioning */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Box-model */</span></span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Typography */</span></span><br><span class="line">  <span class="attribute">font</span>: normal <span class="number">13px</span> <span class="string">"Helvetica Neue"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Visual */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e5e5e5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Misc */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Não use @import</strong></p><p>Comparada com <code>&lt;link&gt;</code>, o <code>@import</code> é mais lento, adiciona requisições extras, e pode causar outros imprevistos. Evite isso e como alternativa você pode:</p><ul><li>Usar múltiplos elementos <code>&lt;link&gt;</code></li><li>Compilar seu CSS com pré processador com SASS, LESS, Stylus ou algum outro pré processador de sua prefêrencia em apenas um arquivo.</li><li><p>Minificar seu arquivo CSS com recursos fornecidos no Rails, Jekyll e outros ambientes.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- Use link elements --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"core.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Avoid @imports --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> url(<span class="string">"more.css"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p> <strong>Media Queries</strong></p><p> Coloque as medias queries o mais perto de suas regras relevantes quanto possível. Não coloque ele todo em um arquivo separado ou no final do documento. Fazendo isso só irá dificultar a manutenção.</p> <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.element</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">@media (<span class="attribute">min-width</span>: <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.element</span> &#123; ...&#125;</span><br><span class="line">  <span class="selector-class">.element-avatar</span> &#123; ... &#125;</span><br><span class="line">  <span class="selector-class">.element-selected</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Declarações Individuais</strong></p><p>Nos casos em que um conjunto de regras inclui apenas uma declaração, considere remover quebras de linha para facilitar a leitura e a edição mais rápida. Qualquer regra definida com várias declarações deve ser dividida em linhas.</p><p>O ponto chave aqui é a detecção de erros, se o validador de CSS disser que tem um erro na linha 183, com apenas uma declaração não há nenhuma dificuldade em encontrar e se forem multiplas como cada uma estará em uma linha, sua sanidade vai agradecer por isso.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Single declarations on one line */</span></span><br><span class="line"><span class="selector-class">.span1</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span2</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span>; &#125;</span><br><span class="line"><span class="selector-class">.span3</span> &#123; <span class="attribute">width</span>: <span class="number">220px</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple declarations, one per line */</span></span><br><span class="line"><span class="selector-class">.sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/sprite.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span>           &#123; <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-home</span>      &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.icon-account</span>   &#123; <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">40px</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>Declaração Abreviada</strong></p><p>Esforce-se para limitar o uso de declarações abreviadas em caso que você deve definir explicitamente todos os valores disponíveis. Propriedades abreviadas incluem: </p><ul><li><code>pading</code></li><li><code>margin</code></li><li><code>font</code></li><li><code>background</code></li><li><code>border</code></li><li><p><code>border-radius</code></p><p>Muitas vezes nós não precisamos definir todos os valores de uma propriedade. Por exemplo, um cabeçalho HTML precisa apenas de margin superior e inferior. O uso excessivo de propriedades abreviadas leva o código a substituições desnecessária e efeitos colaterais não intencionais.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"image.jpg"</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"image.jpg"</span>);</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Comentários</strong></p><p>Código e escrito e mantido por pessoas. Garanta que seu código seja descritivo, bem comentado, e apropriado para os outros. Grandes comentários de código transmitem contexto ou proposito. Não basta reiterar um nome de componente ou de classe.</p><p>Esteja certo de escrever sentenças completas para grandes comentários e frases sucintas para notas gerais.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="comment">/* Modal header */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="comment">/* Wrapping element for .modal-title and .modal-close */</span></span><br><span class="line"><span class="selector-class">.modal-header</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>Nome de classes</strong></p><ul><li>Mantenha as classes em caixa baixa e use hífen no lugar de underline. Hífen serve como quebras naturais em classes relacionadas. Ex.: <code>.btn</code> e <code>.btn-danger</code>.</li><li>Evite abreviação excessiva, <code>.btn</code> é útil para um botão, mas <code>.s</code> não significa nada.</li><li>Mantenha as classes o mais curta e sucinta possível.</li><li>Utilize nomes significativos.</li><li>Use prefixos nas classes baseado na classe pai ou classe base.</li><li><p>Use .js-* para classes com comportamento (em oposição a um estilo), mas mantenha essas classes fora do seu CSS.</p><p>Bom isso é umas dicas bem iniciais e básicas, vamos falar mais sobre isso na segunda parte do CSS Code Style onde estarei abordando mais sobre principalmente como estruturar o código CSS e nomear suas classes de forma apropriada.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-class">.t</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.red</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.header</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.tweet</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.important</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Seletores</strong></p><ul><li>Use classes sobre o elemento tag genérico para otimizar a performance de renderização.</li><li>Evite usar muitos seletores de atributos ex.: <code>[class^=&quot;...&quot;]</code> em componentes que ocorrem comumente. O desempenho do navegador é bem afetado por eles.</li><li>Mantenha os seletores curto e se esforçe para limitar o número de elementos em cada seletor para três.</li><li><p>Escopo de classes para aproximar pais <strong>apenas</strong> quando necessário ex.: quando não estiver usando classes com prefixos.</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">/* Bad example */</span></span><br><span class="line"><span class="selector-tag">span</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.page-container</span> <span class="selector-id">#stream</span> <span class="selector-class">.stream-item</span> <span class="selector-class">.tweet</span> <span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Good example */</span></span><br><span class="line"><span class="selector-class">.avatar</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet-header</span> <span class="selector-class">.username</span> &#123; ... &#125;</span><br><span class="line"><span class="selector-class">.tweet</span> <span class="selector-class">.avatar</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure></li></ul><p>Referência:<br>Codeguide<br><a href="http://codeguide.co/#css" target="_blank" rel="noopener">http://codeguide.co/#css</a></p><p>Bom pessoal essa é a primeira parte do Code Style CSS onde vimos algumas regras que podemos implantar em nossa forma de escrever código. Claro que temos muito que ver ainda e vou trazer outras coisas no próximo artigo como disse no início desse post. Mais para frente posso trazer algum post mais básico a respeito de CSS e também cosias mais legais e mudanças que ocorreram com o CSS3, por hora podemos ir usando isso para escrevermos nossos códigos e depois aprenderemos como fazer coisas mais legais em CSS.</p><p>Abraços a todos e qualquer dúvida ou sugestões, deixem nos comentários.</p><p>Até mais…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Fala pessoal,&lt;br&gt;Depois de um tempo sem postar aqui, (infelizmente tive uns problemas pessoais, profissionais que precisei focar em algum
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="code style" scheme="https://dwoond.github.io/tags/code-style/"/>
    
      <category term="code" scheme="https://dwoond.github.io/tags/code/"/>
    
      <category term="style" scheme="https://dwoond.github.io/tags/style/"/>
    
      <category term="pattern" scheme="https://dwoond.github.io/tags/pattern/"/>
    
      <category term="css" scheme="https://dwoond.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Code Style - HTML</title>
    <link href="https://dwoond.github.io/Code-Style-HTML/"/>
    <id>https://dwoond.github.io/Code-Style-HTML/</id>
    <published>2015-09-03T02:12:39.000Z</published>
    <updated>2019-09-23T18:59:17.252Z</updated>
    
    <content type="html"><![CDATA[<p>Bom Galera, estou trazendo hoje para vocês a continuação da séria de Code Style que começamos a um tempo atrás, e com ela vamos aprender a criar um guia de estilo para padronizar nossos códigos. Lembrando que essa série é voltada para iniciantes e pessoas que estão começando a programar agora e ainda não entendem muito a respeito disso.<br>No primeiro artigo da série que vocês podem acessar <a href="http://dwoond.github.io/Code-Style/">aqui - Code Style -</a> nós falamos um pouco da importância de aprender a fazer um código com um certo padrão na hora de codificar e os benefícios que isso tem para o seu dia a dia tanto pessoalmente quanto profissionalmente.<br>Caso você não use ou esteja em uma empresa pequena, agência ou até mesmo como freelancer eu convido você a estar criando esse projeto de padrão junto comigo, você é livre para fazer como estou fazendo ou alterar onde você achar que te agrade mais e etc. Uma coisa que tem que ficar em claro pessoal é que não podemos criar um padrão também que foge muito a realizade usada pela comunidade pois isso vai atrapalhar na hora de você se adaptar para uma nova empresa ou contruibuir com um projeto open source.</p><p>Um outro post meu também sobre escrita de código eu defendo que independente de você ser um mestre em code style eu acredito sim que você deve escrever código, mesmo que ele não siga padrão ou que ele não fique o mais perfeito possível, afinal para melhorar você precisa errar e para entrar no padrão você precisa primeiro estar fora dele, ou nascer dentro, se você fizer faculdade ou cursos e talz, com certeza isso será passado a você e consequentemente você vai estar já saindo do curso escrevendo direitinho, mas caso você esteja aprendendo sozinho e começando, não tenha medo ou vergonha de ser críticado por isso. Vai ter pessoas que realmente não entendem isso e ao invés de ajudar, vão querer apenas reclamar e brigar por causa do código não estar nos padrões nem performático e mais outros mils problemas, mas o mais importante para você que está começando é, não pare de escrever por causa disso, busque pessoas que estejam dispostas a te ajudar, busque blogs que te ajudem e acima de tudo, estude, evolua e pegue sempre as críticas e tente transforma-las em algo positivo.</p><p>Sem mais delongas vamos ao que interessa.</p><p>Como eu trabalho mais com Front End, vamos fazer inicialmente a série baseada em front, então não teremos algo sobre php, e outras linguagens de back, ou padrões de comunicação com banco de dados etc. Vamos nos atentar aos 3 pilares do Front. HTML, CSS e Javascript. Hoje começaremos a fazer o padrão através do HTML e junto com o post eu vou estar criando um repositório no github para que quem quiser possa acompanhar, contribuir e com isso melhorarmos nosso guia.</p><p>Então pessoal a primeira coisa que vocês precisam saber é que estou baseando o Code Style em alguns links e depois colocarei eles como referência no final do artigo. E esses são só alguns, existe muito mais materiais a respeito disso.</p><p><strong>Doctype</strong><br>A primeira coisa que temos que sempre padronizar pessoal é o uso correto do doctype, atualmente usando HTML5 temos o doctype da seguinte forma.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>E também pode ser escrita em lower case, aqui vale lembrar que o HTML aceita tanto maiúsculas quanto minúsculas, quando eu comecei a aprender HTML o que eu mais odiava era exatamente ter que escrever todas as TAGs em maiúsculas, mais tarde eu vim descobrir que isso era por causa dos browsers e a forma como eles interpretavam o arquivo e com XHTML também. Então também podemos usar assim.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Maiúscula e Minúscula</strong><br>Como falei anteriormente o HTML aceita tanto lowercase ou uppercase (letras minúsculas ou maiúsculas) porém o recomendado é usar sempre lowercases</p><ul><li>Não é bom usar uma mistura de maiúsculas e minúsculas</li><li>Tudo em minúsculo é mais fácil de escrever</li><li>Tudo em minúsculo também deixa o código mais limpo</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUIM</span><br><span class="line"><span class="tag">&lt;<span class="name">SECTION</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MUITO RUIM</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SECTION</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Fechar Tags</strong><br>Outra recomendação é sempre fechar todas as tags</p><ul><li>No HTML5 não tem necessidade de fechar as tags, porém é recomendado que seja feito.</li><li>Até porque as vezes algumas tags que não são fechadas podem quebrar o layout de forma “linda”.</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RUIM</span></span><br><span class="line"><span class="section">&lt;section&gt;</span></span><br><span class="line">    <span class="section">&lt;p&gt;</span><span class="attribute">Este</span> é um parágrafo</span><br><span class="line"><span class="section">&lt;/section&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Fechar Tags Vazias</strong><br>Aqui também é recomendado fechar as tags, mesmo que sejam vazias<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line"></span><br><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">"utf-8"</span>&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TAMBÉM RECOMENDADO</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>A diferença de usar a BARRA ( “/“ ) é que ela é necessário para o XHTML ou XML então se algum software XML vai acessar sua página é recomendado com a barra.</li></ul><p><strong>Letras minúsculas para os nome de atributos</strong></p><p>Aqui pessoal vale o mesmo que para as tags, usar letras minúsculas para definir os atributos. Pelos mesmos motivo também.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUIM</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">CLASS</span>=<span class="string">"text"</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Aspas nos valores de atributos</strong><br>O HTML5 permite valores sem aspas, porém é recomendado sempre usarmos os valores entre aspas (“”).</p><ul><li>Você deve usar aspas se o valore tem espaços</li><li>As aspas facilitam a leitura</li><li>Sempre mantenha um padrão, sempre use aspas ou nunca use, misturar nunca é uma boa ideia.</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NÃO FUNCIONA</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">text</span> <span class="attr">special</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FUNCIONA</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text special"</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUIM</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">text</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Este é um parágrafo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Atributos da Imagem</strong><br>Outro fator muito importante pessoal para os códigos em HTML é o atributo <em>alt</em> das imagens, pois ele será exibido caso e imagem não seja carregada</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUIM</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"endereco/para/imagem.jpg"</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">"endereco/para/imagem.jpg"</span> <span class="attribute">alt</span>=<span class="string">"descrição da imagem"</span> &gt;</span><br></pre></td></tr></table></figure><p>Outra coisa legal e interessante é que sempre devemos definir um tamanho para a imagem pois isso reduz o tempo de oscilação do browser, fazendo com que ele já reserve o espaço para a imagem antes mesmo dela carregar. Faremos isso com css externo é melhor concentrar os estilos em um lugar só.</p><p><strong>Espaços e Sinal de igual</strong><br>Espaços entre o sinal de igual dos atributos parece bom, porém sem os espaços fica mais fácil de ler e entender o código, prefira assim.</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUIM</span><br><span class="line">&lt;link <span class="attr">rel</span> = <span class="string">"stylesheet"</span> <span class="attr">href</span> = <span class="string">"style.css"</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RECOMENDADO</span><br><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">href</span>=<span class="string">"style.css"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>Linhas em branco e identação</strong><br>Não use linhas em branco sem uma boa razão, de preferência para usar uma linha branca apenas para separar blocos de códigos.<br>Quanto a identação também, não tem necessidade de identar tudo, apenas os códigos que são dependentes, tipo uma lista ou uma tabela. Utilize sempre 2 espaços para a identação, ou configure o seu editor para que o tab faça 2 espaços, isso deixa mais legível o código</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">IDENTAÇÃO RUIM</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h1&gt;Famous Cities&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h2&gt;Tokyo&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Tokyo is <span class="keyword">the</span> capital <span class="keyword">of</span> Japan, <span class="keyword">the</span> center <span class="keyword">of</span> <span class="keyword">the</span> Greater Tokyo Area,</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">the</span> most populous metropolitan area <span class="keyword">in</span> <span class="keyword">the</span> world.</span><br><span class="line">    It is <span class="keyword">the</span> seat <span class="keyword">of</span> <span class="keyword">the</span> Japanese government <span class="keyword">and</span> <span class="keyword">the</span> Imperial Palace,</span><br><span class="line">    <span class="keyword">and</span> <span class="keyword">the</span> home <span class="keyword">of</span> <span class="keyword">the</span> Japanese Imperial Family.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">IDENTAÇÃO RECOMENDADA</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Famous Cities<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span><br><span class="line">and the most populous metropolitan area in the world.</span><br><span class="line">It is the seat of the Japanese government and the Imperial Palace,</span><br><span class="line">and the home of the Japanese Imperial Family.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">EXEMPLO DE LISTA</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>London<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">EXEMPLO DE TABELA</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Description<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>A<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Description of A<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>B<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>Description of B<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Comentários</strong></p><p>Comentários de uma linha podem ser escritos normalmente, recomenda-se apenas que use um espaço antes e depois das tags de comentário, <!-- no início e --> no final.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Isso é um comentário em uma linha e curto, normal --&gt;</span></span><br></pre></td></tr></table></figure></p><p>Caso seja mais de uma linha, ou um bloco de comentários, recomenda-se usar da seguinte forma<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    Aqui vão os blocos de comentários</span></span><br><span class="line"><span class="comment">    Pode ter várias linhas </span></span><br><span class="line"><span class="comment">    Comentando tudo que for necessário</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Meta Data</strong><br>A tag title é necessária no HTML5, faça um título mais significativo possível.</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">title</span>&gt;<span class="built_in">Code</span> Style - HTML5&lt;/<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure><p>Para garantir uma interpretação e indexação correta, defina a linguagem e a codificação de caracteres o quanto antes.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"pt-BR"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Code Style - HTML5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>Incluindo CSS e Javascript</strong><br>Essa é a forma que chamamos arquivos de CSS ou Javascript para dentro de nossos arquivos html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- External CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"code-guide.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- In-document CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"code-guide.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Lembrando que o CSS normalmente vai ser chamado dentro da tag HEAD e os script antes do fechamento da tag BODY por questões de performance e etc… (posso escrever um post sobre isso futuramente).</p><p><strong>Ordem de atributos</strong><br>Quando for declarar as tags HTML com atributos de prefêrencia para a seguinte ordem:</p><ul><li>class</li><li>id, name</li><li>data-*</li><li>src, for, type, href, value</li><li>title, alt</li><li>role, aria</li></ul><p>Por Exemplo:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line">&lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"..."</span> id=<span class="string">"..."</span> data-toggle=<span class="string">"modal"</span> href=<span class="string">"#"</span>&gt;</span><br><span class="line">  <span class="type">Example</span> link</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">"..."</span> alt=<span class="string">"..."</span>&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Atributos boleanos</strong><br>São atributos que não precisam ser declarados valores, apenas no XHTML teria essa necessidade, porém no HTML5 não é necessário:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">selected</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>A presença do atributo já o define como verdadeiro, sendo assim, não necessida declarar ele novamente.</p><p><strong>Dicas gerais</strong></p><ul><li>Evite escrever elementos supérfulos, além de estragar a semantica também dificulta a legibilidade e manutenção do código.</li><li>Evite escrever linhas maiores que 80 caracteres, para que o seu editor de texto não tenha barra de rolagem lateral.</li><li>Lembre-se sempre de conversar com a equipe e reavaliar se a ideia e o estilo do código está realmente sendo útil e bom a todos.</li><li>Sempre mantenha os códigos no estilo escolhido, nunca fuja do padrão escolhido.</li></ul><p>Referências:<br>W3C<br><a href="http://www.w3schools.com/html/html5_syntax.asp" target="_blank" rel="noopener">http://www.w3schools.com/html/html5_syntax.asp</a></p><p>Google HTML/CSS Style<br><a href="https://google.github.io/styleguide/htmlcssguide.xml" target="_blank" rel="noopener">https://google.github.io/styleguide/htmlcssguide.xml</a></p><p>Codeguide.io<br><a href="http://codeguide.co/" target="_blank" rel="noopener">http://codeguide.co/</a></p><p>JetBrains<br><a href="https://www.jetbrains.com/phpstorm/help/code-style-html.html" target="_blank" rel="noopener">https://www.jetbrains.com/phpstorm/help/code-style-html.html</a></p><p>Acompanhe no <a href="https://github.com/DWoonD/Code-Style/blob/master/Code%20Style%20-%20HTML5.md" target="_blank" rel="noopener">Github</a></p><p>PS: O post demorou a sair pois infelizmente tive umas complicações no trabalho e outras aqui em casa, já que meu filhão está crescendo e agora dorme tão tarde como o pai, e com isso não consigo mais ficar tanto no pc quanto antes, mas o blog continua. :D</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bom Galera, estou trazendo hoje para vocês a continuação da séria de Code Style que começamos a um tempo atrás, e com ela vamos aprender 
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="code style" scheme="https://dwoond.github.io/tags/code-style/"/>
    
      <category term="code" scheme="https://dwoond.github.io/tags/code/"/>
    
      <category term="style" scheme="https://dwoond.github.io/tags/style/"/>
    
      <category term="pattern" scheme="https://dwoond.github.io/tags/pattern/"/>
    
      <category term="html" scheme="https://dwoond.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Código Feio? Código Bonito?</title>
    <link href="https://dwoond.github.io/Codigo-Feio-Codigo-Bonito/"/>
    <id>https://dwoond.github.io/Codigo-Feio-Codigo-Bonito/</id>
    <published>2015-09-02T02:22:02.000Z</published>
    <updated>2019-09-23T18:59:17.261Z</updated>
    
    <content type="html"><![CDATA[<p>Fala galera beleza? Amanhã sai o segundo post da série sobre code style que estou fazendo aqui no blog e resolvi criar esse aqui antes, pois foi algo que me aconteceu recentemente no trabalho e que meio que venho pensando por essas semanas. Se você ainda não leu o primeiro post da série da uma <a href="http://dwoond.github.io/Code-Style/">passada aqui nesse link</a> e confira e volte amanhã para conferir a segunda parte.</p><p>Sem mais enrolação hoje eu venho aqui para falar com vocês a respeito de <strong>código feio e código bonito.</strong></p><p>É muito comum que durante o início de sua jornada como um programador você faça códigos que aos olhos de muitos seniors, plenos e até mesmo alguns juniores arrogantes (acredite aqui no interior isso acontece aos montes) são classificados como códigos feios e deselegantes e isso pode até ser motivo de piada e talz. Só que como você está começando a programar isso é sim normal, afinal ninguém vai sair codando códigos lindos e performáticos e muito menos perfeitos de primeira não é mesmo? E até mesmo esse pessoal que gosta de se achar o bom um dia também escreveram código ruim. Por isso pessoal, se vocês estão começando com proramação ou com alguma linguagem nova, não se importe ainda com a aparência do mesmo afinal o importante é fazer código. Mas nunca pare de aprender, continue evoluindo pois como eu cito na minha série é muito importante você e sua equipe terem ou usarem algum padrão. O que você nunca deve fazer é parar de estudar e codificar por causa de opiniões negativas e pessoas que apenas vão criticar seu código e reclamar, para esses você ignora e continua no seu foco.</p><blockquote><p>Você só erra no início se não fizer código. Feio ou bonito não importa, apenas importa que você faça código, então escreva.</p></blockquote><p>Quando falamos em escrita de código pessoal existe pelo menos duas coisas muito importante ao qual devemos nos atentar. A primeira é realmente o visual, a forma como se escreve e a aparencia final que seu código vai ter, identação, espaços, comentários etc… Tudo isso entra nesse aspecto visual e vamos estar aprendendo a criar algo mais atraente através da série que estou fazendo. Pois isso facilita em muito como já citei no primeiro post, a respeito de manutenção e escalabilidade.</p><p>A outra pessoal é a respeito da performance do código, e isso envolve muito mais do que a simples escrita de código, pois entra a questão da lógica e todo o funcionamento do código em si, envolve entender e saber como cada linha funciona e o que acontece por de trás de cada código para saber realmente onde colocar cada variável, função, if etc… Isso futuramente eu quero trazer séries para o blog de uma forma mais avançada e focada em cada linguagem, assim como eu for aprendendo também, pois não sou nenhum mestre jedi em tudo e busco a cada dia poder aprender mais.</p><p>Mas mais do que se preocupar com escrever código bonito ou feio, a minha dica principal para o post de hoje pessoal é escreva código, como citei no inicio, nem sempre você vai saber escrever da melhor maneira possivel, porém você deve sempre buscar escrever afinal se você não escrever não vai saber como melhorar. Eu sempre trabalhei com site estático quando comecei minha carreira de freelancer, então comecei apenas com HTML e CSS e usava plugins JS que estavam bem mastigado e fácil de implementar no site, se não nem isso eu conseguia, hoje eu estou com um pouco mais de experiência em javascript, comprei alguns livros e estou fazendo um curso do <a href="http://blog.da2k.com.br/curso-javascript-ninja/" target="_blank" rel="noopener">Fernando Daciuk</a> que é um curso que recomendo muito. Porém quando fiquei sozinho na agência os trampos que tem sempre a parte administrativa do site, que é php e mysql e eu só tinha pego um sistema de base e adaptado para um site simples uma única vez na agência e não usei mais, continuei focado em SEO, CSS3 e js, ai me deparei com a situação de ter que fazer um sistema que administra outros sistemas com controle de usuários, downloads e cadastros que eu levei um mês para fazer e sei que não deve estar o melhor código do mundo, mas sei que através dele eu vou fixar e aprender muita coisa para melhorar, ou seja, estou escrevendo código, para que eu possa ir melhorando sempre, então não tenha vergonha, num dos eventos que fui e em outras ocasiões, escutei diversas vezes já, seja sempre o pior da sua equipe, para que você possa aprender e evoluir, porém nunca se contente e satisfaça em ser o pior, busque sempre melhorar e aprender cada vez mais, afinal nossa área nunca existe um que sabe 100%.</p><p>Lembre-se não existe o código perfeito, existe um código performático, e que funciona muito bem e é bem escrito, porém isso vai sempre depender da equipe envolvida e dos profissionais em questão, um código que pode ser super funcional e bonito na globo.com, pode não ser tão legal e funcional para equipe da locaweb. Pense nisso.</p><p>Bom pessoal é isso que eu tenho para falar para vocês por hoje, espero que tenham gostado e se tiver dúvidas deixem nos comentários, críticas e sugestões também são bem vindas. Se gostou não esquece de compartilhar.</p><p>Abração</p><p>T+</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Fala galera beleza? Amanhã sai o segundo post da série sobre code style que estou fazendo aqui no blog e resolvi criar esse aqui antes, p
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="code" scheme="https://dwoond.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Code Style</title>
    <link href="https://dwoond.github.io/Code-Style/"/>
    <id>https://dwoond.github.io/Code-Style/</id>
    <published>2015-08-26T01:48:34.000Z</published>
    <updated>2019-09-23T18:59:17.252Z</updated>
    
    <content type="html"><![CDATA[<p>Bom pessoal venho trazer para vocês uma série de posts sobre code style, espero que gostem.</p><p>Code Style ou Estilo do Código diz respeito a como escrevemos o nosso código e o quanto ele é padronizado. Acredito que pode ser chamado de design pattern, porém quando pesquisei a respeito vi que é algo mais voltado a Java e outras linguagens mais side-server. Então resolvi chamar de code style que é como eu encontrei em vários Githubs de alguns desenvolvedores front end.</p><p>Bom o intuito do post será começar uma série provavelmente de 4 posts:</p><ul><li>Code Style</li><li>Code Style - HTML</li><li>Code Style - CSS</li><li>Code Style - JS</li></ul><p>O primeiro será esse dando uma introdução a respeito do code style e falando de uma forma geral do porque usar ou porque criar.</p><p>O segundo post iremos criar juntos um padrão de código para html, o terceiro um padrão para css e por fim no último um padrão para o javascript.</p><p>Acredito que iremos usar como base alguns padrões de códigos que encontramos por ai feito pelo pessoal da comunidade e talvez mudaremos uma coisa ou outra de acordo com minha preferência e você também será livre para criar junto o seu code style.</p><blockquote><p>Certo, até aqui tudo legal, mas porque raios eu vou querer criar um code style?</p></blockquote><p>Primeiramente um Code Style serve para podermos ter um padrão de ESCRITA de código, ou seja, seja num site, num app ou qualquer outro projeto que estejamos desenvolvendo, o code style será o padrão e quando digo padrão não quero dizer SEU padrão, pelo contrário é um padrão da equipe, ou seja, todos os devs tem que escrever igual.</p><p>Uma vez li uma frase que dizia mais ou menos assim</p><blockquote><p>Se só você é o único que entende seu código e acha isso bom, saiba que você está errado.</p></blockquote><p>Não lembro onde li isso, mas o significado é exatamente isso, o fato de você, e só você entender seu código é muito ruim tanto para a empresa que você trabalha quanto para a equipe que trabalha com você e principalmente para você mesmo no futuro, pois se você desenvolve a mais de um ano sabe que a forma que você escreve código vem mudando certo? E se no futuro precisar fazer uma manutenção será que você vai entender o que você mesmo escreveu? Com um padrão você evita esse problema.</p><p>Muitas empresas grandes como globo.com, locaweb e etc, tem seus próprios padrões de desenvolvimentos, algumas delas até mesmo framework próprio e isso facilita muito na hora de dar manutenção de código e escalar códigos.</p><p>Outro ponto importante em conhecer alguns code styles já existentes no mercado é o fato de que se você for contribuir para algum código no GitHub por exemplo, isso conta muito na hora de seu código ser aceito ou não, afinal fica difícil de aceitar um código que terá que ser reescrito por causa de padrão de escrita.</p><p>Aqui nos resta dois caminhos criar ou seguir um código.</p><p>###Por que criar?</p><p>Dependendo de onde você trabalha pode ser uma pequena ou grande agência ou uma softhouse, não importa, se vocês não tiverem um padrão de código, acredito que vocês devem sim criar um o quanto antes, e nesse cenário é que entrar o porque de criar, afinal como não existe precisa ser criado, não totalmente do zero, pode ser baseado em alguns encontrados no github e blogs pela internet. O importante é que exista um na empresa e uma boa utilidade para ele vai ser quando entrar um membro novo na equipe e se deparar com algo todo documentado e padronizado, a integração desse novo membro será muito mais fácil.</p><p>Aqui não temos regras pessoal, é literalmente sentar com todos os desenvolvedores e ver qual a melhor forma de escrever código e a que agrade a todos, por exemplo, quanto espaços vai ter a tabulação, como vai ser feito os comentários, vai ter espaço ou não em partes especificas do código etc…</p><p>A equipe cria as regras e isso deve ser seguido sempre depois de definidas, até que um dia uma pessoa qualquer leia esse código e apenas olhando pareça ser todo escrito por apenas uma pessoa.</p><p>###Por que adotar um code style?</p><p>Para essa pergunta a resposta vale para a anterior também, adotar um code style vai agilizar muito o desenvolvimento e manutenção de códigos, escalabilidade dos mesmos e principalmente uma integração de um novo membro para a equipe, em lugares onde a rotatividade de pessoal é grande isso facilita muito, pois é muito mais fácil explicar conceitos e funcionalidades padronizadas do que simplesmente chegar para a pessoa e dizer, leia ai e decifre.</p><p>Então os ganhos são grandes principalmente para as empresas e para a equipe como um todo, afinal não trabalhamos sozinhos e se você acha que seria melhor estar sozinho, melhor repensar um pouco ;)</p><p>Bom para o próximo post estaremos criando um repositório no github e começaremos o padrão que eu vou adotar na agência que eu trabalho e com isso também poder melhorar o ambiente de desenvolvimento onde trabalho, caso você tenha necessidade de criar um padrão será bem vindo para construírmos juntos, caso contrário sua opinião e sugestão será bem vinda também.</p><p>É isso pessoal, ótima semana a todos, dúvidas, críticas e sugestões nos comentáriso abaixo.</p><p>Abraços</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bom pessoal venho trazer para vocês uma série de posts sobre code style, espero que gostem.&lt;/p&gt;
&lt;p&gt;Code Style ou Estilo do Código diz res
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="front-end" scheme="https://dwoond.github.io/tags/front-end/"/>
    
      <category term="code style" scheme="https://dwoond.github.io/tags/code-style/"/>
    
      <category term="code" scheme="https://dwoond.github.io/tags/code/"/>
    
      <category term="style" scheme="https://dwoond.github.io/tags/style/"/>
    
      <category term="pattern" scheme="https://dwoond.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title>O básico de Markdown</title>
    <link href="https://dwoond.github.io/O-basico-de-Markdown/"/>
    <id>https://dwoond.github.io/O-basico-de-Markdown/</id>
    <published>2015-08-04T00:21:56.000Z</published>
    <updated>2019-09-23T18:59:17.262Z</updated>
    
    <content type="html"><![CDATA[<p>Bom pessoal conforme prometido para quem está acompanhando o blog, eu disse que faria um post básico sobre markdown para quem está começando a utilizar a linguagem, tanto para github, hexo ou qualquer outro gerenciador de sites estático ou não, desde que use a sintaxe.</p><p>Se você ainda não leu, de uma lida nesse post <a href="https://dwoond.github.io">Criando seu site com Hexo</a> para saber um pouco mais como criar um site estático ou blog, utilizando o framework <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> que é o mesmo utlizado para esse site.</p><p>Bom sem mais delongas vamos ao que interessa, Markdown.</p><p>##O que é?<br>Segundo a <a href="https://pt.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Wikipedia</a> é uma linguagem simples de marcação criada por John Gruber e Aaron Swartz. Mas ai você me pergunta, já temos o HTML que está com todas as forças na versão 5 porque iria querer outra linguagem de marcação? Eu te digo, claro que o markdown, pelo menos ao meu ver, não á algo que vá substituir o HTML como linguagem de marcação, porém em alguns casos específicos é sim um substituto muito bom, por exemplo, no hexo a linguagem para poder escrever os posts é a markdown e tenho certeza que seria muito mais custoso escrever todo o blog em HTML, pois fala sério ficar abrindo e fechando tags não é algo tão prazeroso assim, já na markdown temos uma sintaxe muito próxima ao texto final, o que facilita bastante o processo de escrita para um blog por exemplo, sem a necessidade de ter um ckeditor ou outra ferramenta parecida, e o mais legal é que é muito simples fazer coisas que se pode fazer com HTML. E isso facilita muito e agiliza o tempo hábil.</p><p>##Onde utilizar<br>Bom confesso a vocês que utilizo markdown a pouco tempo e os lugares que tenho contato com ele é principalmente no <a href="http://github.com" target="_blank" rel="noopener">gitHub</a> quando queremos escrever sobre nossos repositórios, é com markdown que fazemos isso, e aqui no meu blog que utilizo o hexo para tal, então eu escrevo tudo em markdown no meu editor e quando compilo pelo terminal, ele gera os arquivos conforme vocês podem ver agora. Caso conheça outros usos, pode deixar nos comentários que eu terei prazer em acrescentar aqui. :)</p><p>##Sintaxe<br>Bom abaixo quero passar um pouco para vocês da sintaxe do markdown e como utiliza-lo para gerar o conteúdo formatado da forma que vocês desejam.</p><p>####Primeiro vamos falar de parágrafos.<br>Para isso não temos segredos, um parágrafo deve ser digitado como um texto sem marcação especial alguma. Como um texto no word.</p><p>####Cabeçalhos<br>Para fazer um cabeçalho baseado no H1, H2, H3, H4, H5 e H6 do HTML devemos utilizar o # (hashtag) no inicio da frase, e a quantidade de hashtag para o número do heading.<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cabeçalho <span class="number">1</span></span><br><span class="line">#H1 </span><br><span class="line">Cabeçalho <span class="number">2</span> </span><br><span class="line">##H2</span><br><span class="line">Cabeçalho <span class="number">3</span> </span><br><span class="line">###H3</span><br><span class="line">Cabeçalho <span class="number">4</span> </span><br><span class="line">####H4</span><br><span class="line">Cabeçalho <span class="number">5</span> </span><br><span class="line">#####H5 </span><br><span class="line">Cabeçalho <span class="number">6</span> </span><br><span class="line">######H6</span><br></pre></td></tr></table></figure></p><p>####Itálicos e Negritos<br>Para gerarmos os textos em <em>itálico</em> ou <strong>negrito</strong> basta que utilizemos o símbolo de * ou também _ (underline) de acordo com a necessidade ou podendo combinar as duas formas para realizar a formatação desejada.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*uma vez para itálico*</span></span><br><span class="line">_um underline para itálico</span><br><span class="line"></span><br><span class="line"><span class="strong">**duas vezes para negrito**</span></span><br><span class="line"><span class="strong">__dois underlines para negrito__</span></span><br></pre></td></tr></table></figure><p>####Blockquotes ou citações</p><blockquote><p>Se você quer fazer o equivalente a um blockquote basta utilizar o sinal de &gt; no início do parágrafo.</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Dessa forma você terá uma citação ou <span class="keyword">blockquote, </span>como <span class="keyword">preferir </span>chamar</span><br></pre></td></tr></table></figure><p>####Listas</p><p>Para listas não ordenadas podemos usar o * ou - no início da palavras com um espaço</p><ul><li>Japão</li><li>Inglaterra</li><li>Holanda</li><li>Alemanha</li><li>Brasil</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>Item</span><br><span class="line"><span class="bullet">* </span>Item</span><br><span class="line"><span class="bullet">* </span>Item</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Item</span><br><span class="line"><span class="bullet">- </span>Item</span><br><span class="line"><span class="bullet">- </span>Item</span><br></pre></td></tr></table></figure><p>Agora se quiser fazer uma lista ordenada basta usar o número e um ponto 1. Item.</p><ol><li>Japão</li><li>Inglaterra</li><li>Holanda</li><li>Alemanha</li><li>Brasil</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Item</span><br><span class="line"><span class="bullet">2. </span>Item</span><br><span class="line"><span class="bullet">3. </span>Item</span><br></pre></td></tr></table></figure><p>Podemos aninhar dois itens usando dois espaços abaixo do item que desejamos e ai podemos usar uma lista ordenada ou não.</p><ol><li>Japão<ul><li>Tokyo</li><li>Japonês</li></ul></li><li>Holanda<br>2.1. Amsterdam<br>2.2. Front jobs</li></ol><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">Item</span></span><br><span class="line">  * <span class="keyword">Item</span></span><br><span class="line">  * <span class="keyword">Item</span></span><br><span class="line">  </span><br><span class="line"><span class="number">2.</span> <span class="keyword">Item</span></span><br><span class="line">  <span class="number">2.1</span>. <span class="keyword">Item</span></span><br><span class="line">  <span class="number">2.2</span>. <span class="keyword">Item</span></span><br></pre></td></tr></table></figure><p>####Código</p><p>Para fazermos um código podemos usar o formato inline e em blocos.<br>Para inline basta que usamos uma <code>case e fechamos ela, o resultado será como esse.</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`código <span class="keyword">inline</span> aqui`</span><br></pre></td></tr></table></figure><p>E para bloco de códigos como esses que vimos até agora usamos 3 crases e fechamos o bloco com outras 3 crases</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bloco <span class="keyword">de</span> código aqui</span><br><span class="line">(<span class="keyword">N</span>ão consegui uma <span class="keyword">forma</span> <span class="keyword">de</span> demonstrar, mas o resultado é esse)</span><br></pre></td></tr></table></figure><p>####Links</p><p>Para finalizarmos o nosso guia básico de sintaxe temos um aspecto bem interessante que são os links.</p><p>Para isso devemos escrever o nome do link dentro de colchetes [] e depois o endereço do link dentro de parênteses ()</p><p><a href="http://google.com" target="_blank" rel="noopener">Google</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>](<span class="link">http://google.com</span>)</span><br></pre></td></tr></table></figure><p>Para imagem usamos uma sintaxe parecida porém o colchetes vai ser para o <code>alt</code> da <code>tag img</code> e o parênteses o caminho para o arquivo. A única diferença e bem importante é que tudo isso deve ser precedido por um ponto de exclamação !<br><img src="teste.jpg" alt="imagem teste, farol do windows"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">imagem teste, farol do windows</span>](<span class="link">teste.jpg</span>)</span><br></pre></td></tr></table></figure><p>##Guias e artigos</p><p>Abaixo deixo para vocês alguns links com conteúdo sobre a sintaxe ou a própria linguagem Markdown.</p><p><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Site oficial</a><br>Basicamente tirei todos os exemplos do GitHub ^-^ (Abaixo tem mais links com assuntos mais avançados também)<br><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="noopener">GitHub Help Markdown</a><br><a href="http://markdowntutorial.com/lesson/1/_" target="_blank" rel="noopener">Tutorial prático de Markdown</a><br><a href="http://www.moodle.ufscar.br/help.php?file=advanced_markdown.html" target="_blank" rel="noopener">Site da ufscar sobre markdown</a></p><p>Bom pessoal, conforme for me aprimorando mais e caso tenha interesse da parte de vocês posso mais para frente estar trazendo algo mais avançado sobre o assunto, acredito que com essa base vocês já consigam fazer qualquer página estática ou descrição de repositório no GitHub, qualquer dúvida deixe nos comentários, dicas e sugestões também são bem vindas</p><p>Sucesso a todos<br>Até mais</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bom pessoal conforme prometido para quem está acompanhando o blog, eu disse que faria um post básico sobre markdown para quem está começa
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="hexo" scheme="https://dwoond.github.io/tags/hexo/"/>
    
      <category term="sites estáticos" scheme="https://dwoond.github.io/tags/sites-estaticos/"/>
    
      <category term="tutorial" scheme="https://dwoond.github.io/tags/tutorial/"/>
    
      <category term="markdown" scheme="https://dwoond.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>A importância da equipe unida</title>
    <link href="https://dwoond.github.io/A-importancia-da-equipe-unida/"/>
    <id>https://dwoond.github.io/A-importancia-da-equipe-unida/</id>
    <published>2015-08-04T00:18:22.000Z</published>
    <updated>2019-09-23T18:59:17.251Z</updated>
    
    <content type="html"><![CDATA[<p>Eae pessoal, tudo beleza? Espero que sim, vamos para mais um post buscando trazer algum aprendizado novo para a galera.  </p><p>Hoje quero falar um pouco sobre comportamento e equipe de trabalho. Todos nós que não trabalhamos como freelancers (em alguns casos até mesmo freelancers, porém de uma forma menos direta) eventualmente para não dizer 100% do tempo, estamos trabalhando em equipe, seja equipe de front-end, seja uma equipe completa, com mídia, planejamento, designer e etc. E espero eu que todos eles sejam seres humanos, e como tal, todos tem seus pensamentos, dias ruins ou bons, egos, principalmente egos e etc. Por isso é muito importante para o profissional saber lhe dar com a equipe em que trabalha e principalmente com a filosofia a qual essa equipe/empresa trabalha. Abaixo vou colocar alguns pontos que acho importante para que todos trabalhem em comunhão.</p><p>##Comunicação<br>Isso é o princípio de qualquer coisa em nossa vida, o ser humano chegou onde chegou por saber se comunicar e como seres “inteligentes” que somos devemos, em equipe saber fazer isso da maneira mais clara e simples possível, principalmente em momentos críticos, como início ou término de projetos e principalmente quando falamos com pessoas mais leigas em relação a nossas áreas. A pesar de achar que toda pessoa deve saber o básico sobre o contexto geral da empresa, ainda assim esse básico muitas vezes realmente é apenas o básico, por isso a importância de saber se comunicar, saber se expressar, sem ser arrogante, prepotente ou ignorante a ponto de se achar melhor que outros ou que porque a pessoa não entendeu, você não deve repetir. Aqui vale como na época da escola, onde os professores tinham que repetir quantas vezes fossem necessários até que a pessoa entenda, porque senão lá na frente, terá que refazer o trabalho e isso não é nada agradável.</p><p>Tente sempre ser sólido no que você passar e garantir que a outra pessoa entendeu o que realmente precisou ser entendido. Principalmente sobre os assuntos técnicos, por exemplo, quais serão a necessidade do cliente sobre o sistema administrativo do site, qual a comunicação entre as tabelas do banco de dados, quais tecnologias, público etc etc.</p><p>##Reuniões<br>Outro ponto muito importante são as reuniões, afinal são nelas que podemos alinhar com toda a equipe e ter uma visão geral a respeito do andamento do projeto. Não estaremos abordando ainda sobre métodos AGILE ou SCRUM pois eu ainda faço pouco uso deles, e de forma mais pessoal do que profissional, hoje onde trabalho por exemplo, fazemos reunião toda segunda feira para alinharmos os projetos e jobs da semana, e para saber como anda o cumprimento das metas e tarefas. Além dessa reunião semanal quando há necessidade de fazer alguma reunião de planejamento ou discutir a respeito de um job que está entrando também reunimos o pessoal responsável e afetado de acordo com a área, para juntos poder construir algo sólido e palpável dentro de toda nossa filosofia.</p><p>Em particular onde eu trabalho é uma agência interessante pela filosofia que eu mesmo demorei muito a entender, sempre trabalhei com supervisão e delegação de tarefas, e hoje temos a filosofia de a equipe toda ser responsável pelo projeto, design, interface, programação, enfim, o projeto como um todo, <em>se existe uma falha de layout então os designers que falharam eu sou da programação e não tenho nada com isso.</em> Esse é o tipo de pensamento que não existe na nossa equipe, todos temos o direito e dever de revisar o projeto, de falar no início do mesmo o que acha, de direcionar e claro dar opiniões de melhoria, desde que essa opinião seja embasada e concreta, não existe não gostei porque eu não gostei, tem que haver uma boa explicação para o mesmo.</p><p>E confesso que no início isso foi muito difícil de ser entendido por mim, inclusive tive algumas discordâncias no início que não vem ao caso, mas mesmo em momentos que acontecia alguma desavença ou algum problema com cliente nosso “Patrão” (entre aspas porque também se considera no mesmo níveis que nós, aceitando e dando sugestões como um membro da equipe) não buscou em momento algum um culpado, muito pelo contrário, nos reuníamos e buscávamos soluções para que o erro não se repetisse, e acreditem se tiverem uma equipe que realmente consiga por isso 100% em prática, terá um ambiente muito produtivo e positivo.</p><p>##Conhecimentos<br>Outro ponto muito importante para o bom andamento de um projeto em equipe é o conhecimento técnico da equipe e a capacidade de ampliar e transmitir esse conhecimento. Aqui vale uma ressalva para pessoas que interagem com mais de uma “parte” do projeto, por exemplo, programação e designer, ou planejamento e programação, ou ainda para aquela pessoa que vai criar ou realizar algo que vai ser usado por outra pessoa. Acredito que assim como um código deve parecer ter sido escrito por apenas uma pessoa, um projeto também deve parecer ter sido realizado por apenas uma, não que alguém vai ficar com os méritos, longe disso, mas todos envolvidos no projeto, seja, programadores, designers, planejamento, mídia, etc, devem falar a mesma língua para que o projeto possa ser o mais sólido possível e para que o tempo possa ser mais bem aproveitado, por isso coloquei como primeiro tópico a comunicação, pois ela sempre está envolvida com tudo. Saber escrever um documento, um diagrama, um flowchart, todo um pré-requisito, entender o que é ux, ui, layout responsivo, mobile first, também, e não apenas da área de cada um, mas sim de um composto geral, pois nem sempre poderemos tratar de um projeto por vez, ou sozinho, muitas vezes esse projeto será dividido com outros e por isso a importância da comunicação para que seja feita da melhor forma possível.</p><p>E pessoal um conselho meu aqui, totalmente minha opinião pessoal, busque aprender sempre além da sua área, se você é programador, busque entender um pouco de design, marketing, planejamento, e o contrário também se são de outras áreas busquem entender um pouco de programação, mesmo que lógica, isso vai te fazer um profissional diferente pode ter certeza e conhecimento nunca é demais, nunca.</p><p>##Metas<br>Outro aspecto importante de uma equipe é o estabelecimento de metas e claro o fator de cumprir as mesmas, metas de nada adiantam se não forem atingidas. E para tal, é importante ter alguém que possa fazer esse papel, muitas vezes chatos, de ficar atento as metas, prazos e fazer as cobranças das atividades realizadas, andamento do projeto, dificuldades, e etc. Acredito que sem esse papel de analisar e estabelecer prazos e verificar andamentos, os projetos costumam falhar muito mais, eu não tenho números exatos que comprovam isso, mas pense na sua vida pessoal, se você planeja alguma coisa que você quer fazer as vezes dá errado, imagina se não planejar, as probabilidades são maiores. Um grande amigo me dizia, um homem prevenido vale por dois, e a melhor forma de se prevenir é planejando e para isso é extremamente necessário fazer um bom planejamento. Mas Willian sou programador não faço ideia de como fazer planejamento e cuidar dessa parte, não tem problemas da uma conferido nesse <a href="http://metodowd.com.br" target="_blank" rel="noopener">MétodoWD</a> e vai aprender fazer uma planejamento muito bom e de forma concreta e fácil.</p><p>##Planejamento<br>Conforme abordei acima bem de leve sobre planejamento, aqui quero falar um pouco mais, afinal o planejamento é o seu guia de desenvolvimento e consequentemente da sua empresa, equipe, projeto, vida, pois é né, podemos fazer isso para todas áreas em nossas vidas, seja pessoal ou profissional, um bom planejamento é essencial. E isso está intimamente ligado com as metas, para que realmente você possa ver progresso e alcance em sua área. Comece nem que seja da forma mais simples, definindo e estruturando seu tempo, pode usar algum gerenciador de tarefas tipo o <a href="http://wunderlist.com" target="_blank" rel="noopener">Wunderlist</a> onde você pode colocar o que você quer fazer, prazos e descrever a tarefa, eu uso pra conciliar as coisas do trabalho com estudo e coisas pessoais, e depois que comecei a usar, passei a realizar muito mais que antes.</p><p>Claro que o planejamento não vai fazer nada sozinho, temos que ter a boa vontade de pôr em prática e de sabermos cobrar a nós mesmos para realizarmos, e como compensar em caso de atrasos e etc.</p><p>Bom pessoal, esse foi o conteúdo que queria trazer para vocês a respeito de equipe e ambiente de trabalho, além desses pontos técnicos acredito que não preciso abordar muito a respeito de pontos “humanitários” né? Como:</p><p>####Respeito</p><p>####Bom senso</p><p>####Empatia</p><p>Entre outros, sei que isso vai depender muito mais de cada indivíduo, mas também é essencial para poder se trabalhar em equipe, talvez futuramente podemos falar de pontos mais pessoais.</p><p>Caso tenham alguma dúvida ou alguma opinião ou correção, favor deixar nos comentários<br>Sucesso a todos<br>Abraços.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Eae pessoal, tudo beleza? Espero que sim, vamos para mais um post buscando trazer algum aprendizado novo para a galera.  &lt;/p&gt;
&lt;p&gt;Hoje que
      
    
    </summary>
    
      <category term="Desenvolvimento Pessoal" scheme="https://dwoond.github.io/categories/Desenvolvimento-Pessoal/"/>
    
    
      <category term="equipe" scheme="https://dwoond.github.io/tags/equipe/"/>
    
      <category term="trabalho em equipe" scheme="https://dwoond.github.io/tags/trabalho-em-equipe/"/>
    
      <category term="comportamento" scheme="https://dwoond.github.io/tags/comportamento/"/>
    
      <category term="planejamento" scheme="https://dwoond.github.io/tags/planejamento/"/>
    
  </entry>
  
  <entry>
    <title>Criando seu site com Hexo</title>
    <link href="https://dwoond.github.io/Criando-seu-site-com-Hexo/"/>
    <id>https://dwoond.github.io/Criando-seu-site-com-Hexo/</id>
    <published>2015-07-22T22:59:28.000Z</published>
    <updated>2019-09-23T18:59:17.261Z</updated>
    
    <content type="html"><![CDATA[<p>##Introdução</p><p>Nesse post vamos aprender a criar um site estático com um framework de blog, chamado Hexo.<br>Como na descrição do próprio framework o Hexo é rápido, simples e poderoso. O grande diferencial e que me fez adotar o Hexo para criar esse blog é que é realmente simples, e pelo fato de fazer um deploy diretamente para o <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> facilitando assim muito a produção e o ambiente de desenvolvimento.<br>Claro que você pode levar outras coisas em conta, mas se você quer aprender coisas novas, usar linha de comando e ainda assim gerar artigos você poderá fazer isso com Hexo.</p><p>##Características</p><ol><li>Rapidez para gerar os arquivos. Com a base feita em nodejs, isso agiliza e muito a hora de produção e criação do seu blog/site.</li><li>Apenas um comando para publicar, ou seja, digitou hexo deploy no seu terminal e seu blog é publicado no mesmo momento.</li><li>Suporta Markdown, é uma linguagem de marcação, ou como eles dizem, não é uma linguagem de marcação, é uma forma de você escrever o seu site sem a necessidade de ficar abrindo e fechando tags em HTML etc. Pode ser estranho no início, mas a curva de aprendizado é bem rápida.</li><li>Suporta Plugins, não é um wordpress da vida, mas também tem suporte a alguns plugins que iremos falar mais abaixo.</li><li>Estrutura de pastas de fácil entendimento.</li><li>Permite personalização através de temas, (futuramente irei postar como criar e personalizar temas).</li></ol><p>##Iniciando</p><p>Para começar você deve ir até o site do <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a> e presumindo que você já tenha o nodejs instalado, caso não tenha, vá até o site do <a href="http://nodejs.org" target="_blank" rel="noopener">NodeJs</a> e instale para o seu sistema operacional, aqui no meu caso eu uso Windows (e não tenho problema com isso ;p).</p><p>Feito isso basta rodar o comando:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>Feito isso você poderá executar os comandos do hexo através do terminal do cmd. Apenas uma observação aqui.</p><blockquote><p>Você pode configurar o windows de uma forma que você consiga executar node, ruby, git etc, tudo pelo cmd, configurando as variáveis de sistema. Qualquer dúvida deixem nos comentários.</p></blockquote><p>Os próximos comandos de exemplo são:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span><span class="keyword">install</span></span><br><span class="line"><span class="keyword">hexo </span>server</span><br></pre></td></tr></table></figure><p>O primeiro deles inicia o projeto dentro de uma pasta chamada blog no diretório que você estiver.<br>O segundo entra dentro da pasta blog.<br>O terceiro comando vai instalar todas as dependências do Hexo<br>E o quarto e último você vai rodar o servidor localhost do seu projeto, que por padrão fica no localhost:4000.</p><p>Com isso já temos um blog de exemplo sendo executado, cabendo a nós apenas a personalização do mesmo. E claro a criação de conteúdo e também o deploy para o GitHub Pages.<br>Então vamos lá que ainda temos bastante coisa para ver ^.^</p><p>###Página de Exemplo do Blog</p><p>Na página de demonstração do Hexo ele nos apresenta a mais 3 comandos novos.</p><ol><li>hexo new “Meu novo Post”</li><li>hexo generate</li><li>hexo deploy</li></ol><p>O primeiro faz com que o hexo crie um novo post sendo que o que estiver entre as aspas será o título do post. Feito isso o hexo irá criar um arquivo com o nome do seu post, preenchendo os espaços vazios com hífens. O arquivo vai ficar dentro da pasta source/_post. Abrindo ele você poderá criar todo o conteúdo que você deseja para o seu post.</p><p>A primeira estrutura que aparece no arquivo é:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Meu</span> <span class="string">novo</span> <span class="string">Post</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-07</span><span class="bullet">-22</span> <span class="number">19</span><span class="string">:59:28</span></span><br><span class="line"><span class="attr">category:</span> <span class="string">Desenvolvimento</span> <span class="string">web</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">sites</span> <span class="string">estáticos</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">github</span> <span class="string">pages</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">tutorial</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>Title: Definirá o Título da página e do post<br>date: Data que o post foi criado<br>category: Você pode criar categorias para agrupar seus posts<br>tags: Serve como uma categoria também porém mais fraca.</p><p>Abaixo dos - - -</p><p>Ai você pode criar o que você quiser usando markdown para formatar.<br>Teremos um guia de sintaxe markdown em breve não se preocupe, por hora essa página pode te ajudar <a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="noopener">Markdon Basics</a>.</p><p>###Personalizando</p><p>A princípio quando instalamos o Hexo e rodamos o comando hexo server no nosso terminal, acamos sendo redirecionado para a página de exemplo e também com o tema padrão que vem com o hexo. O tema padrão é o <code>landscape</code> você pode substituir esse tema facilmente através da lista de temas do próprio hexo que pode ser encontrada na <a href="https://hexo.io/themes/" target="_blank" rel="noopener">lista de temas</a> ou aqui no <a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">GitHub</a>(que é bem mais abrangente)</p><p>Depois de escolher o tema que você quer, basta seguir a documentação do mesmo para configurar ele e fazer funcionar de acordo com a sua necessidade, em relação a post, recursos e etc.</p><p>Outras coisas importantes pessoal sobre personalização e entra também a questão de configuração, é dar uma atenção especial ao seu arquivo <code>_config.yml</code> pois através dele você pode configurar qualquer coisa no seu blog/site e principalmente é aqui que você deve alterar o nome do tema na linha <code>theme</code> para o nome do tema que você baixou e escolheu.</p><p>As informações são separadas por blocos e autoexplicativas, caso tenham dúvidas podem perguntar nos comentários e caso haja necessidade eu crio um outro post explicando linha a linha do arquivo.</p><p>###Plugins</p><p>Plugins são outras fontes muito valiosa para qualquer blog/site. No caso do Hexo não poderia ser diferente e o mesmo possui uma <a href="https://hexo.io/plugins/" target="_blank" rel="noopener">lista de plugins</a>. Temos plugins diversos para diversas ações, desde melhorar o código gerado, com para deploy que iremos usar na seção abaixo. Caso tenha alguma dúvida você pode estar lendo a <a href="https://hexo.io/docs/plugins.html" target="_blank" rel="noopener">página de plugins</a> na documentação ou a própria página do plugin que você escolheu e está com dificuldade. A documentação está em inglês por enquanto, não sei se alguém está trabalhando na tradução, mas eu estou e falta traduzir a API e três páginas apenas da documentação. Então logo mais terá em português BR também</p><p>###Deploy GitHub Pages</p><p>Para fazer deploy direto para o dominio.github.io você terá que alterar isso no seu arquivo de _config (aqui você pode optar pelo do Hexo ou pelo do seu tema, caso esteja usando algum tema que tenha essa opção.)<br>Antes de mais nada pessoal a primeira coisa que deve ser feita é criar o repositório no <a href="http://github.com" target="_blank" rel="noopener">GitHub</a> com o nome do seu site, ex: meusite.github.io, depois disso vá até a página de <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">deploy</a> e siga as instruções para que você possa fazer o deploy diretamente para o seu site.</p><p>A segunda coisa a fazer, conforme está na página é a instalação do plugin do git com o comando<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></p><p>Depois disso no seu arquivo <code>_config.yml</code> você altera ou cria a opção:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: </span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/seurepositório/meusite.github.io.git</span></span><br></pre></td></tr></table></figure></p><p>E por último quando estiver pronto para fazer o deploy do seu site para o GitHub Pages, basta executar o comando:</p><p><code>hexo deploy --generate</code></p><p>Que ele irá gerar todos os arquivos estáticos do seu site/blog e irá automaticamente publicar no seu site.</p><p>Bom pessoal, espero que tenha ajudado vocês a aprender alguma coisa legal, nesse aritgo e qualquer dúvida só chamar nos comentários.</p><p>Obrigado e Abraços…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##Introdução&lt;/p&gt;
&lt;p&gt;Nesse post vamos aprender a criar um site estático com um framework de blog, chamado Hexo.&lt;br&gt;Como na descrição do pr
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="hexo" scheme="https://dwoond.github.io/tags/hexo/"/>
    
      <category term="sites estáticos" scheme="https://dwoond.github.io/tags/sites-estaticos/"/>
    
      <category term="github pages" scheme="https://dwoond.github.io/tags/github-pages/"/>
    
      <category term="tutorial" scheme="https://dwoond.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Comunidade e Palestras</title>
    <link href="https://dwoond.github.io/comunidade-palestras/"/>
    <id>https://dwoond.github.io/comunidade-palestras/</id>
    <published>2015-07-15T16:29:04.000Z</published>
    <updated>2019-09-23T18:59:17.266Z</updated>
    
    <content type="html"><![CDATA[<p>Todo desenvolvedor ou designer ou qualquer outro profissional seja na área de TI ou qualquer outra área, uma hora ou outra acaba se deparando com o termo de comunidade “x” onde o X seria ai a profissão em questão. Como o intuito dos artigos aqui são a área de desenvolvimento web, vamos focar na comunidade de web, o que já é um leque bem grande acreditem.</p><p>Através desse post quero compartilhar os benefícios e “perigos” encontrados em comunidades e palestras baseado em minha experiência pessoal</p><p>##Comunidade</p><p>De forma literal, comunidade é um grupo de pessoas e não vou ficar usando termos super corretos para descrever isso, mas em nosso caso é exatamente isso, um grupo de pessoas que tem um objetivo comum que nada mais é que compartilhar e ajudar pessoas que estejam ou não no início de suas carreiras. E isso funciona, mas não depende só da comunidade e sim de você também. Vamos entender porque.</p><p>####Como se relacionar<br>Se você mora na capital é muito mais acessível eventos, palestras e meios de ter contato com a comunidade de desenvolvedores em geral, até mesmo empresas com mentes mais abertas recebem pessoas para conhecer e compartilhar ambiente, fora que tem os lugares de co-working etc, então nesse caso se você é da capital do seu estado, é bem provável que já tenha ido em um evento e caso não o tenha feito, meu amigo esta perdendo tempo e conhecimento.<br>Para o pessoal que assim como eu mora no interior isso acaba sendo mais complexo por que os gastos são maiores as disponibilidades na agenda também as vezes não ajuda etc etc, mas nada disso é desculpa para não ir a eventos, ou se preogramar de forma correta para que possa ir.</p><p><code>Mas Will porque você ta falando como se isso fosse algo extremamente importante?</code><br>-Simples. Porque é.</p><p>Quando você vai a algum evento de desenvolvimento, temos vários para citar, como por exemplo, os “frontins” ou conferências e até mesmo workshops, você está indo de encontro total com conhecimento e o que para mim é o mais valioso disso tudo, networking. O primeiro evento que participei foi a Conferência CSS e meu amigo, aquilo realmente mudou minha vida de forma que eu ainda não posso nem mensurar direito, porque ainda estou sofrendo os efeitos, com o evento eu pude tirar várias dúvidas, aprender coisas que eu realmente não sabia (Obrigado de novo <a href="http://twitter.com/bernarddeluna" target="_blank" rel="noopener">Bernard de luna</a>) e a todos os outros que vocês podem conferir aqui <a href="http://www.conferenciacssbrasil.com.br/" target="_blank" rel="noopener">conferência css</a>.</p><p>E o porque disso tudo ser mágico, bom vamos lá.</p><p>-Eu aprendi algumas coisas muito legais de CSS3 envolvendo animações e performance com o <a href="https://twitter.com/zehf" target="_blank" rel="noopener">Zeh Fernandes</a> e depois trocamos um pouco de ideia no intervalo.<br>-Tive entendimento sobre tipografia com o <a href="https://twitter.com/shiota" target="_blank" rel="noopener">Eduardo Shiota</a> que eu nem fazia ideia que poderia pensar dessa forma e que faria tanta diferença, e como falei do networking, acabei conversando com o Shiota a respeito de como é trabalhar na Europa, como poder crescer dessa forma na carreira e ele me deu várias dicas.<br>-Aprendi a testar CSS, é sério, nunca pensei nisso, porque aquele pensamento de interior me bloqueava, porque fazer isso, é um simples site, mas sempre tem sua utilidade e se quisermos crescer, temos que melhorar indpendentemente de onde estivermos, sempre seguindo em frente e com quem aprendi isso? Com o grande <a href="https://twitter.com/eduardojmatos" target="_blank" rel="noopener">Eduardo Matos</a>.<br>-Aprendi sobre sass e como poder implantar, que alias é o que estou fazendo hoje no meu atual trabalho na WDesign, ou seja, olha como contribuiu para mim, e graças a <a href="https://twitter.com/loumontano" target="_blank" rel="noopener">Lourdes Montano</a>, onde ela detalhou tudo a respeito do sass e que podemos implantar até mesmo em pequenos projetos.<br>-Aprendi sobre background-gradient, que é algo fantástico com o <a href="http://twitter.com/bernarddeluna" target="_blank" rel="noopener">Bernard de luna</a> que até hoje eu não sei como vivi sem saber dessas coisas, ou seja, sempre agragando conhecimento.<br><a href="https://twitter.com/almirfilho" target="_blank" rel="noopener">Almir Filho</a> e <a href="https://twitter.com/caio_gondim" target="_blank" rel="noopener">Caio Godim</a> me ensinaram o que é cor, como ela atua em nosso cérebro e como trabalhar melhor com as cores.<br>-E no final a grande novidade de Flex box com alguém que eu tenho um carinho muito especial e considero como um mestre <a href="https://twitter.com/diegoeis" target="_blank" rel="noopener">Diego Eis</a>.</p><p>Ou seja, tudo que eu vi em um dia que me dispus a ir num evento da comunidade me agregou muito, coisas que talvez eu nem viesse a esbarrar se não fosse por esse meio. As conversas nas entrelinhas com esse pessoal top, me fez mudar muitas coisas que eu acreditava e estavam erradas ou não funcionariam para o meu desejo no futuro.</p><p>Por isso minha dica é, se aproxime o máximo que puder da comunidade na sua área de atuação, se for front-end, como a minha, procure ir nos “frontins” no meu caso o front in sampa, procure ir para o eventos de CSS, Js e afins, pois isso só irá acrescentar na sua vida profissional e pessoal, pode ter certeza disso.</p><p>E o principal ponto a ter atenção aqui, quando quis dizer “perigos” é que por mais que esse pessoal seja, super experiênte e competente no que fazem, caberá sempre a você julgar e analisar o melhor para você, não é porque a Lourdes usa Sass que de repente eu seja obrigado a usar, tanto que pessoalmente eu uso o Stylus, mas implantei o Sass na empresa porque é o mais utlizado, então você mesmo tendo seus ídolos e mestres, deve usar o conhecimento deles como guia e fonte de conhecimento, mas nunca como verdade absoluta, e digo mais, nunca acredite prontamente e abertamente em tudo que é dito, sempre busque mais, busque questionar, pesquisar e mais que tudo isso busque acrescentar e depois também distribuir, pois esse é todo o objetivo da comunidade, sempre trazer o melhor e distribuir, muitas vezes de graça o conhecimento obtido, como o Diego Eis fala em seu livro, sobre ensinar o caminho das pedras para ser um desenvolvedor melhor.</p><p>###Palestras</p><p>Sobre palestras o que tenho a dizer é, assistam todas em tudo quanto é lugar possivel, youtube, meetups, eventials, vimeo, infoq, e se você puder estar presencialmente é muito melhor pelos mesmos motivos que citei no evento, networking e bate-papo com o pessoal, e o mesmo “perigo” também é válido, principalmente quando são palestras gratuitos da comunidade para comunidade, pois são pessoas como eu e você apenas buscando passar conhecimento adiante, mas sempre cabe a nós discernir o que é melhor para nossa vida pessoal e profissional.</p><p>Aqui uma resalva maior pessoal, busque também criar palestras e palestrar em eventos menores, meetups estão ai para isso pois a curva de aprendizado é muito maior quando você está desenvolvendo algo para ensinar as pessoas, se aprende muito mais assim. Caso seja tímido e não goste de falar em publico, escreva, crie um blog, medium etc. temos muitas ferramentas para isso, o próprio Hexo onde é gerado esse blog, que mais para frente estarei falando disso aqui, enfim, participe e faça parte, tenho certeza que vai mudar sua vida.</p><p>##Conclusão</p><p>Aproveite todas as oportunidades de eventos, palestras, encontros e afins que você pode participar, vá, faça esse sacríficio para si e você vai ver que ganhará muito, mas muito com isso, e o mais importante de tudo, fomente a comunidade também, uma das coisas que me marcou na conferência foi que “reclamei” de não ter muitos eventos no interior, como se isso fosse uma obrigação da comunidade da capital de nos prover tais eventos, porém nunca me passou pela minha cabeça que lá também teve um inicio, que algum dia teve que começar e provavelmente começou com poucas pessoas para chegar no que é hoje e foi quando o Daniel me indagou, mas o que você fez para acontecer algo na sua cidade? E até aquele momento nunca tinha feito nada. </p><p>E graça a isso tudo é com muito orgulho que digo que nasceu o <a href="http://ararasdev.com" target="_blank" rel="noopener">Araras Dev</a> que será um meetup mensal com duas palestras e 3 horas de duração, estamos acertando os últimos detalhes e em breve iremos dar início, se você é da região aqui de Araras - SP e gosta de desenvolver seja como hobbie ou profissionalmente, será um prazer ter você aqui conosco.</p><p>Espero que o post tenha sido útil a vocês e deixem comentários e críticas positivas.</p><p>Abrass até breve.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Todo desenvolvedor ou designer ou qualquer outro profissional seja na área de TI ou qualquer outra área, uma hora ou outra acaba se depar
      
    
    </summary>
    
      <category term="Desenvolvimento Web" scheme="https://dwoond.github.io/categories/Desenvolvimento-Web/"/>
    
    
      <category term="comunidade" scheme="https://dwoond.github.io/tags/comunidade/"/>
    
      <category term="conhecimento" scheme="https://dwoond.github.io/tags/conhecimento/"/>
    
      <category term="conferência css" scheme="https://dwoond.github.io/tags/conferencia-css/"/>
    
      <category term="palestras" scheme="https://dwoond.github.io/tags/palestras/"/>
    
  </entry>
  
</feed>
